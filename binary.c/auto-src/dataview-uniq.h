#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef enum {
    asn1Sccbase_jointstate_mode_acceleration = 0,
    asn1Sccbase_jointstate_mode_effort = 1,
    asn1Sccbase_jointstate_mode_position = 2,
    asn1Sccbase_jointstate_mode_raw = 3,
    asn1Sccbase_jointstate_mode_speed = 4,
    asn1Sccbase_jointstate_mode_unset = 5
} asn1SccBase_JointState_MODE;

void asn1SccBase_JointState_MODE_Initialize(asn1SccBase_JointState_MODE* pVal);

#define ERR_BASE_JOINTSTATE_MODE		16  /**/
flag asn1SccBase_JointState_MODE_IsConstraintValid(const asn1SccBase_JointState_MODE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE_MODE		17  /**/
#define asn1SccBase_JointState_MODE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_JointState_MODE_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_JointState_MODE_Encode(const asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE_MODE		18  /**/
flag asn1SccBase_JointState_MODE_Decode(asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTSTATE_MODE		19  /**/
#define asn1SccBase_JointState_MODE_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_JointState_MODE_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccBase_JointState_MODE_ACN_Encode(const asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTSTATE_MODE		20  /**/
flag asn1SccBase_JointState_MODE_ACN_Decode(asn1SccBase_JointState_MODE* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_time_resolution_microseconds = 0,
    asn1Sccbase_time_resolution_milliseconds = 1,
    asn1Sccbase_time_resolution_seconds = 2
} asn1SccBase_Time_Resolution;

void asn1SccBase_Time_Resolution_Initialize(asn1SccBase_Time_Resolution* pVal);

#define ERR_BASE_TIME_RESOLUTION		23  /**/
flag asn1SccBase_Time_Resolution_IsConstraintValid(const asn1SccBase_Time_Resolution* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME_RESOLUTION		24  /**/
#define asn1SccBase_Time_Resolution_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_Time_Resolution_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_Time_Resolution_Encode(const asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME_RESOLUTION		25  /**/
flag asn1SccBase_Time_Resolution_Decode(asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TIME_RESOLUTION		26  /**/
#define asn1SccBase_Time_Resolution_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_Time_Resolution_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccBase_Time_Resolution_ACN_Encode(const asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TIME_RESOLUTION		27  /**/
flag asn1SccBase_Time_Resolution_ACN_Decode(asn1SccBase_Time_Resolution* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_geometry_splinebase_coordinatetype_derivative_to_next = 0,
    asn1Sccbase_geometry_splinebase_coordinatetype_derivative_to_prior = 1,
    asn1Sccbase_geometry_splinebase_coordinatetype_knuckle_point = 2,
    asn1Sccbase_geometry_splinebase_coordinatetype_ordinary_point = 3,
    asn1Sccbase_geometry_splinebase_coordinatetype_second_derivative_to_next = 4,
    asn1Sccbase_geometry_splinebase_coordinatetype_second_derivative_to_prior = 5,
    asn1Sccbase_geometry_splinebase_coordinatetype_tangent_point_for_next = 6,
    asn1Sccbase_geometry_splinebase_coordinatetype_tangent_point_for_prior = 7
} asn1SccBase_geometry_SplineBase_CoordinateType;

void asn1SccBase_geometry_SplineBase_CoordinateType_Initialize(asn1SccBase_geometry_SplineBase_CoordinateType* pVal);

#define ERR_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		30  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_IsConstraintValid(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		31  /**/
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_geometry_SplineBase_CoordinateType_Encode(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		32  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_Decode(asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		33  /**/
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_geometry_SplineBase_CoordinateType_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccBase_geometry_SplineBase_CoordinateType_ACN_Encode(const asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_GEOMETRY_SPLINEBASE_COORDINATETYPE		34  /**/
flag asn1SccBase_geometry_SplineBase_CoordinateType_ACN_Decode(asn1SccBase_geometry_SplineBase_CoordinateType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_samples_depthmap_depth_measurement_state_measurement_error = 0,
    asn1Sccbase_samples_depthmap_depth_measurement_state_too_far = 1,
    asn1Sccbase_samples_depthmap_depth_measurement_state_too_near = 2,
    asn1Sccbase_samples_depthmap_depth_measurement_state_valid_measurement = 3
} asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE;

void asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Initialize(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		37  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_IsConstraintValid(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		38  /**/
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Encode(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		39  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_Decode(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		40  /**/
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_ACN_Encode(const asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_DEPTH_MEASUREMENT_STATE		41  /**/
flag asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE_ACN_Decode(asn1SccBase_samples_DepthMap_DEPTH_MEASUREMENT_STATE* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_samples_depthmap_projection_type_planar = 0,
    asn1Sccbase_samples_depthmap_projection_type_polar = 1
} asn1SccBase_samples_DepthMap_PROJECTION_TYPE;

void asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Initialize(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		44  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_IsConstraintValid(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		45  /**/
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Encode(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		46  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_Decode(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		47  /**/
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_samples_DepthMap_PROJECTION_TYPE_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_ACN_Encode(const asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_PROJECTION_TYPE		48  /**/
flag asn1SccBase_samples_DepthMap_PROJECTION_TYPE_ACN_Decode(asn1SccBase_samples_DepthMap_PROJECTION_TYPE* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_samples_depthmap_unit_axis_unit_x = 0,
    asn1Sccbase_samples_depthmap_unit_axis_unit_y = 1,
    asn1Sccbase_samples_depthmap_unit_axis_unit_z = 2
} asn1SccBase_samples_DepthMap_UNIT_AXIS;

void asn1SccBase_samples_DepthMap_UNIT_AXIS_Initialize(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		51  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_IsConstraintValid(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		52  /**/
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Encode(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		53  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_Decode(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		54  /**/
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_samples_DepthMap_UNIT_AXIS_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccBase_samples_DepthMap_UNIT_AXIS_ACN_Encode(const asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_UNIT_AXIS		55  /**/
flag asn1SccBase_samples_DepthMap_UNIT_AXIS_ACN_Decode(asn1SccBase_samples_DepthMap_UNIT_AXIS* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_samples_laser_range_errors_end_laser_range_errors = 0,
    asn1Sccbase_samples_laser_range_errors_max_range_error = 1,
    asn1Sccbase_samples_laser_range_errors_measurement_error = 2,
    asn1Sccbase_samples_laser_range_errors_other_range_errors = 3,
    asn1Sccbase_samples_laser_range_errors_too_far = 4,
    asn1Sccbase_samples_laser_range_errors_too_near = 5
} asn1SccBase_samples_LASER_RANGE_ERRORS;

void asn1SccBase_samples_LASER_RANGE_ERRORS_Initialize(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal);

#define ERR_BASE_SAMPLES_LASER_RANGE_ERRORS		58  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_IsConstraintValid(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASER_RANGE_ERRORS		59  /**/
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccBase_samples_LASER_RANGE_ERRORS_Encode(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASER_RANGE_ERRORS		60  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_Decode(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_LASER_RANGE_ERRORS		61  /**/
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_samples_LASER_RANGE_ERRORS_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccBase_samples_LASER_RANGE_ERRORS_ACN_Encode(const asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_LASER_RANGE_ERRORS		62  /**/
flag asn1SccBase_samples_LASER_RANGE_ERRORS_ACN_Decode(asn1SccBase_samples_LASER_RANGE_ERRORS* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_samples_frame_frame_mode_t_compressed_modes = 0,
    asn1Sccbase_samples_frame_frame_mode_t_mode_bayer = 1,
    asn1Sccbase_samples_frame_frame_mode_t_mode_bayer_bggr = 2,
    asn1Sccbase_samples_frame_frame_mode_t_mode_bayer_gbrg = 3,
    asn1Sccbase_samples_frame_frame_mode_t_mode_bayer_grbg = 4,
    asn1Sccbase_samples_frame_frame_mode_t_mode_bayer_rggb = 5,
    asn1Sccbase_samples_frame_frame_mode_t_mode_bgr = 6,
    asn1Sccbase_samples_frame_frame_mode_t_mode_grayscale = 7,
    asn1Sccbase_samples_frame_frame_mode_t_mode_jpeg = 8,
    asn1Sccbase_samples_frame_frame_mode_t_mode_pjpg = 9,
    asn1Sccbase_samples_frame_frame_mode_t_mode_png = 10,
    asn1Sccbase_samples_frame_frame_mode_t_mode_rgb = 11,
    asn1Sccbase_samples_frame_frame_mode_t_mode_rgb32 = 12,
    asn1Sccbase_samples_frame_frame_mode_t_mode_undefined = 13,
    asn1Sccbase_samples_frame_frame_mode_t_mode_uyvy = 14,
    asn1Sccbase_samples_frame_frame_mode_t_raw_modes = 15
} asn1SccBase_samples_frame_frame_mode_t;

void asn1SccBase_samples_frame_frame_mode_t_Initialize(asn1SccBase_samples_frame_frame_mode_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_MODE_T		65  /**/
flag asn1SccBase_samples_frame_frame_mode_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_mode_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		66  /**/
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BITS_FOR_ENCODING        4

flag asn1SccBase_samples_frame_frame_mode_t_Encode(const asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		67  /**/
flag asn1SccBase_samples_frame_frame_mode_t_Decode(asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		68  /**/
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_samples_frame_frame_mode_t_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag asn1SccBase_samples_frame_frame_mode_t_ACN_Encode(const asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_MODE_T		69  /**/
flag asn1SccBase_samples_frame_frame_mode_t_ACN_Decode(asn1SccBase_samples_frame_frame_mode_t* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccbase_samples_frame_frame_status_t_status_empty = 0,
    asn1Sccbase_samples_frame_frame_status_t_status_invalid = 1,
    asn1Sccbase_samples_frame_frame_status_t_status_valid = 2
} asn1SccBase_samples_frame_frame_status_t;

void asn1SccBase_samples_frame_frame_status_t_Initialize(asn1SccBase_samples_frame_frame_status_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_STATUS_T		72  /**/
flag asn1SccBase_samples_frame_frame_status_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_status_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		73  /**/
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccBase_samples_frame_frame_status_t_Encode(const asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		74  /**/
flag asn1SccBase_samples_frame_frame_status_t_Decode(asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		75  /**/
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccBase_samples_frame_frame_status_t_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccBase_samples_frame_frame_status_t_ACN_Encode(const asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_STATUS_T		76  /**/
flag asn1SccBase_samples_frame_frame_status_t_ACN_Decode(asn1SccBase_samples_frame_frame_status_t* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccwrappers_geometry_splinetype_degenerate = 0,
    asn1Sccwrappers_geometry_splinetype_polynomial_bezier = 1,
    asn1Sccwrappers_geometry_splinetype_polynomial_bspline = 2,
    asn1Sccwrappers_geometry_splinetype_rational_bezier = 3,
    asn1Sccwrappers_geometry_splinetype_rational_bspline = 4
} asn1SccWrappers_geometry_SplineType;

void asn1SccWrappers_geometry_SplineType_Initialize(asn1SccWrappers_geometry_SplineType* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINETYPE		79  /**/
flag asn1SccWrappers_geometry_SplineType_IsConstraintValid(const asn1SccWrappers_geometry_SplineType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINETYPE		80  /**/
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccWrappers_geometry_SplineType_Encode(const asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINETYPE		81  /**/
flag asn1SccWrappers_geometry_SplineType_Decode(asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINETYPE		82  /**/
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccWrappers_geometry_SplineType_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccWrappers_geometry_SplineType_ACN_Encode(const asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINETYPE		83  /**/
flag asn1SccWrappers_geometry_SplineType_ACN_Decode(asn1SccWrappers_geometry_SplineType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		8033  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		8034  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		8035  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		8036  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		8037  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		8040  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		8041  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		8042  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		8043  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		8044  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt32 asn1SccDummyBase_T;


void asn1SccDummyBase_T_Initialize(asn1SccDummyBase_T* pVal);

#define ERR_DUMMYBASE_T		8068  /**/
flag asn1SccDummyBase_T_IsConstraintValid(const asn1SccDummyBase_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMYBASE_T_2		8075  /**/
#define asn1SccDummyBase_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummyBase_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummyBase_T_Encode(const asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMYBASE_T_2		8076  /**/
flag asn1SccDummyBase_T_Decode(asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DUMMYBASE_T		8071  /**/
#define asn1SccDummyBase_T_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccDummyBase_T_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccDummyBase_T_ACN_Encode(const asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DUMMYBASE_T		8072  /**/
flag asn1SccDummyBase_T_ACN_Decode(asn1SccDummyBase_T* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccDummyBase_T asn1SccDummy2Base_T;


void asn1SccDummy2Base_T_Initialize(asn1SccDummy2Base_T* pVal);

#define ERR_DUMMY2BASE_T		1  /**/
flag asn1SccDummy2Base_T_IsConstraintValid(const asn1SccDummy2Base_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_DUMMY2BASE_T_2_2		12  /**/
#define asn1SccDummy2Base_T_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccDummy2Base_T_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccDummy2Base_T_Encode(const asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DUMMY2BASE_T_2_2		13  /**/
flag asn1SccDummy2Base_T_Decode(asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DUMMY2BASE_T		4  /**/
#define asn1SccDummy2Base_T_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccDummy2Base_T_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccDummy2Base_T_ACN_Encode(const asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DUMMY2BASE_T		5  /**/
flag asn1SccDummy2Base_T_ACN_Decode(asn1SccDummy2Base_T* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Time --------------------------------------------*/

typedef struct {
    asn1SccT_UInt32 secs;
    asn1SccT_UInt32 nsecs;

} asn1SccT_Time;

void asn1SccT_Time_Initialize(asn1SccT_Time* pVal);

#define ERR_T_TIME_SECS		8128  /**/
#define ERR_T_TIME_NSECS		8139  /**/
flag asn1SccT_Time_IsConstraintValid(const asn1SccT_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_TIME		8150  /**/
#define ERR_UPER_ENCODE_T_TIME_SECS_2		8135  /**/
#define ERR_UPER_ENCODE_T_TIME_NSECS_2		8146  /**/
#define asn1SccT_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Time_Encode(const asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_TIME		8151  /**/
#define ERR_UPER_DECODE_T_TIME_SECS_2		8136  /**/
#define ERR_UPER_DECODE_T_TIME_NSECS_2		8147  /**/
flag asn1SccT_Time_Decode(asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_TIME		8152  /**/
#define ERR_ACN_ENCODE_T_TIME_SECS		8131  /**/
#define ERR_ACN_ENCODE_T_TIME_NSECS		8142  /**/
#define asn1SccT_Time_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccT_Time_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccT_Time_ACN_Encode(const asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_TIME		8153  /**/
#define ERR_ACN_DECODE_T_TIME_SECS		8132  /**/
#define ERR_ACN_DECODE_T_TIME_NSECS		8143  /**/
flag asn1SccT_Time_ACN_Decode(asn1SccT_Time* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		8047  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		8048  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		8049  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		8050  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		8051  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		8054  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		8055  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		8056  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		8057  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		8058  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		8061  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		8062  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		8063  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		8064  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		8065  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccT_Double;


void asn1SccT_Double_Initialize(asn1SccT_Double* pVal);

#define ERR_T_DOUBLE		8079  /**/
flag asn1SccT_Double_IsConstraintValid(const asn1SccT_Double* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_DOUBLE		8080  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Double_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_DOUBLE		8081  /**/
flag asn1SccT_Double_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_DOUBLE		8082  /**/
#define asn1SccT_Double_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccT_Double_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccT_Double_ACN_Encode(const asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_DOUBLE		8083  /**/
flag asn1SccT_Double_ACN_Decode(asn1SccT_Double* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Angle --------------------------------------------*/

typedef struct {
    asn1SccT_Double rad;

} asn1SccBase_Angle;

void asn1SccBase_Angle_Initialize(asn1SccBase_Angle* pVal);

#define ERR_BASE_ANGLE_RAD		855  /**/
flag asn1SccBase_Angle_IsConstraintValid(const asn1SccBase_Angle* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_ANGLE		866  /**/
#define ERR_UPER_ENCODE_BASE_ANGLE_RAD_2		862  /**/
#define asn1SccBase_Angle_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Angle_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Angle_Encode(const asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_ANGLE		867  /**/
#define ERR_UPER_DECODE_BASE_ANGLE_RAD_2		863  /**/
flag asn1SccBase_Angle_Decode(asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_ANGLE		868  /**/
#define ERR_ACN_ENCODE_BASE_ANGLE_RAD		858  /**/
#define asn1SccBase_Angle_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccBase_Angle_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccBase_Angle_ACN_Encode(const asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_ANGLE		869  /**/
#define ERR_ACN_DECODE_BASE_ANGLE_RAD		859  /**/
flag asn1SccBase_Angle_ACN_Decode(asn1SccBase_Angle* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_commands_Motion2D --------------------------------------------*/

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;

} asn1SccBase_commands_Motion2D;

void asn1SccBase_commands_Motion2D_Initialize(asn1SccBase_commands_Motion2D* pVal);

#define ERR_BASE_COMMANDS_MOTION2D_TRANSLATION		1520  /**/
#define ERR_BASE_COMMANDS_MOTION2D_ROTATION		1531  /**/
#define ERR_BASE_COMMANDS_MOTION2D_HEADING_RAD		1542  /**/
flag asn1SccBase_commands_Motion2D_IsConstraintValid(const asn1SccBase_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D		1563  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1527  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1538  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_MOTION2D_HEADING_2		1559  /**/
#define asn1SccBase_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccBase_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccBase_commands_Motion2D_Encode(const asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D		1564  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1528  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_ROTATION_2		1539  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_MOTION2D_HEADING_2		1560  /**/
flag asn1SccBase_commands_Motion2D_Decode(asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_COMMANDS_MOTION2D		1565  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_MOTION2D_TRANSLATION		1523  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_MOTION2D_ROTATION		1534  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_MOTION2D_HEADING		1555  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_MOTION2D_HEADING_RAD		1545  /**/
#define asn1SccBase_commands_Motion2D_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define asn1SccBase_commands_Motion2D_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag asn1SccBase_commands_Motion2D_ACN_Encode(const asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_COMMANDS_MOTION2D		1566  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_MOTION2D_TRANSLATION		1524  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_MOTION2D_ROTATION		1535  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_MOTION2D_HEADING		1556  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_MOTION2D_HEADING_RAD		1546  /**/
flag asn1SccBase_commands_Motion2D_ACN_Decode(asn1SccBase_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_PoseUpdateThreshold --------------------------------------------*/

typedef struct {
    asn1SccT_Double distance;
    asn1SccT_Double angle;

} asn1SccBase_PoseUpdateThreshold;

void asn1SccBase_PoseUpdateThreshold_Initialize(asn1SccBase_PoseUpdateThreshold* pVal);

#define ERR_BASE_POSEUPDATETHRESHOLD_DISTANCE		978  /**/
#define ERR_BASE_POSEUPDATETHRESHOLD_ANGLE		989  /**/
flag asn1SccBase_PoseUpdateThreshold_IsConstraintValid(const asn1SccBase_PoseUpdateThreshold* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD		1000  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		985  /**/
#define ERR_UPER_ENCODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		996  /**/
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BITS_FOR_ENCODING        208

flag asn1SccBase_PoseUpdateThreshold_Encode(const asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD		1001  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_DISTANCE_2		986  /**/
#define ERR_UPER_DECODE_BASE_POSEUPDATETHRESHOLD_ANGLE_2		997  /**/
flag asn1SccBase_PoseUpdateThreshold_Decode(asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_POSEUPDATETHRESHOLD		1002  /**/
#define ERR_ACN_ENCODE_BASE_POSEUPDATETHRESHOLD_DISTANCE		981  /**/
#define ERR_ACN_ENCODE_BASE_POSEUPDATETHRESHOLD_ANGLE		992  /**/
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BYTES_FOR_ACN_ENCODING       26 
#define asn1SccBase_PoseUpdateThreshold_REQUIRED_BITS_FOR_ACN_ENCODING        208

flag asn1SccBase_PoseUpdateThreshold_ACN_Encode(const asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_POSEUPDATETHRESHOLD		1003  /**/
#define ERR_ACN_DECODE_BASE_POSEUPDATETHRESHOLD_DISTANCE		982  /**/
#define ERR_ACN_DECODE_BASE_POSEUPDATETHRESHOLD_ANGLE		993  /**/
flag asn1SccBase_PoseUpdateThreshold_ACN_Decode(asn1SccBase_PoseUpdateThreshold* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Temperature --------------------------------------------*/

typedef struct {
    asn1SccT_Double kelvin;

} asn1SccBase_Temperature;

void asn1SccBase_Temperature_Initialize(asn1SccBase_Temperature* pVal);

#define ERR_BASE_TEMPERATURE_KELVIN		1023  /**/
flag asn1SccBase_Temperature_IsConstraintValid(const asn1SccBase_Temperature* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TEMPERATURE		1034  /**/
#define ERR_UPER_ENCODE_BASE_TEMPERATURE_KELVIN_2		1030  /**/
#define asn1SccBase_Temperature_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Temperature_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Temperature_Encode(const asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TEMPERATURE		1035  /**/
#define ERR_UPER_DECODE_BASE_TEMPERATURE_KELVIN_2		1031  /**/
flag asn1SccBase_Temperature_Decode(asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TEMPERATURE		1036  /**/
#define ERR_ACN_ENCODE_BASE_TEMPERATURE_KELVIN		1026  /**/
#define asn1SccBase_Temperature_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccBase_Temperature_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccBase_Temperature_ACN_Encode(const asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TEMPERATURE		1037  /**/
#define ERR_ACN_DECODE_BASE_TEMPERATURE_KELVIN		1027  /**/
flag asn1SccBase_Temperature_ACN_Decode(asn1SccBase_Temperature* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_commands_Speed6D --------------------------------------------*/

typedef struct {
    asn1SccT_Double surge;
    asn1SccT_Double sway;
    asn1SccT_Double heave;
    asn1SccT_Double roll;
    asn1SccT_Double pitch;
    asn1SccT_Double yaw;

} asn1SccBase_commands_Speed6D;

void asn1SccBase_commands_Speed6D_Initialize(asn1SccBase_commands_Speed6D* pVal);

#define ERR_BASE_COMMANDS_SPEED6D_SURGE		1569  /**/
#define ERR_BASE_COMMANDS_SPEED6D_SWAY		1580  /**/
#define ERR_BASE_COMMANDS_SPEED6D_HEAVE		1591  /**/
#define ERR_BASE_COMMANDS_SPEED6D_ROLL		1602  /**/
#define ERR_BASE_COMMANDS_SPEED6D_PITCH		1613  /**/
#define ERR_BASE_COMMANDS_SPEED6D_YAW		1624  /**/
flag asn1SccBase_commands_Speed6D_IsConstraintValid(const asn1SccBase_commands_Speed6D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D		1635  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SURGE_2		1576  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_SWAY_2		1587  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1598  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_ROLL_2		1609  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_PITCH_2		1620  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_SPEED6D_YAW_2		1631  /**/
#define asn1SccBase_commands_Speed6D_REQUIRED_BYTES_FOR_ENCODING       78 
#define asn1SccBase_commands_Speed6D_REQUIRED_BITS_FOR_ENCODING        624

flag asn1SccBase_commands_Speed6D_Encode(const asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D		1636  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SURGE_2		1577  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_SWAY_2		1588  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_HEAVE_2		1599  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_ROLL_2		1610  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_PITCH_2		1621  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_SPEED6D_YAW_2		1632  /**/
flag asn1SccBase_commands_Speed6D_Decode(asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D		1637  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D_SURGE		1572  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D_SWAY		1583  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D_HEAVE		1594  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D_ROLL		1605  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D_PITCH		1616  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_SPEED6D_YAW		1627  /**/
#define asn1SccBase_commands_Speed6D_REQUIRED_BYTES_FOR_ACN_ENCODING       78 
#define asn1SccBase_commands_Speed6D_REQUIRED_BITS_FOR_ACN_ENCODING        624

flag asn1SccBase_commands_Speed6D_ACN_Encode(const asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D		1638  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D_SURGE		1573  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D_SWAY		1584  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D_HEAVE		1595  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D_ROLL		1606  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D_PITCH		1617  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_SPEED6D_YAW		1628  /**/
flag asn1SccBase_commands_Speed6D_ACN_Decode(asn1SccBase_commands_Speed6D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_AngleAxisd --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_AngleAxisd_axis;

typedef struct {
    asn1SccT_Double angle;
    asn1SccWrappers_AngleAxisd_axis axis;

} asn1SccWrappers_AngleAxisd;

void asn1SccWrappers_AngleAxisd_axis_Initialize(asn1SccWrappers_AngleAxisd_axis* pVal);
void asn1SccWrappers_AngleAxisd_Initialize(asn1SccWrappers_AngleAxisd* pVal);

#define ERR_WRAPPERS_ANGLEAXISD_ANGLE		5500  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS_ELM		5511  /**/
#define ERR_WRAPPERS_ANGLEAXISD_AXIS		5522  /**/
flag asn1SccWrappers_AngleAxisd_IsConstraintValid(const asn1SccWrappers_AngleAxisd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD		5529  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5507  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS		5523  /**/
#define ERR_UPER_ENCODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5518  /**/
#define asn1SccWrappers_AngleAxisd_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_AngleAxisd_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_AngleAxisd_Encode(const asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD		5530  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_ANGLE_2		5508  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS		5524  /**/
#define ERR_UPER_DECODE_WRAPPERS_ANGLEAXISD_AXIS_ELM_2		5519  /**/
flag asn1SccWrappers_AngleAxisd_Decode(asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_ANGLEAXISD		5531  /**/
#define ERR_ACN_ENCODE_WRAPPERS_ANGLEAXISD_ANGLE		5503  /**/
#define ERR_ACN_ENCODE_WRAPPERS_ANGLEAXISD_AXIS		5525  /**/
#define ERR_ACN_ENCODE_WRAPPERS_ANGLEAXISD_AXIS_ELM		5514  /**/
#define asn1SccWrappers_AngleAxisd_REQUIRED_BYTES_FOR_ACN_ENCODING       53 
#define asn1SccWrappers_AngleAxisd_REQUIRED_BITS_FOR_ACN_ENCODING        418

flag asn1SccWrappers_AngleAxisd_ACN_Encode(const asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_ANGLEAXISD		5532  /**/
#define ERR_ACN_DECODE_WRAPPERS_ANGLEAXISD_ANGLE		5504  /**/
#define ERR_ACN_DECODE_WRAPPERS_ANGLEAXISD_AXIS		5526  /**/
#define ERR_ACN_DECODE_WRAPPERS_ANGLEAXISD_AXIS_ELM		5515  /**/
flag asn1SccWrappers_AngleAxisd_ACN_Decode(asn1SccWrappers_AngleAxisd* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Vector2d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[2];
} asn1SccWrappers_Vector2d_data;

typedef struct {
    asn1SccWrappers_Vector2d_data data;

} asn1SccWrappers_Vector2d;

void asn1SccWrappers_Vector2d_data_Initialize(asn1SccWrappers_Vector2d_data* pVal);
void asn1SccWrappers_Vector2d_Initialize(asn1SccWrappers_Vector2d* pVal);

#define ERR_WRAPPERS_VECTOR2D_DATA_ELM		5535  /**/
#define ERR_WRAPPERS_VECTOR2D_DATA		5546  /**/
flag asn1SccWrappers_Vector2d_IsConstraintValid(const asn1SccWrappers_Vector2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D		5553  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA		5547  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5542  /**/
#define asn1SccWrappers_Vector2d_REQUIRED_BYTES_FOR_ENCODING       27 
#define asn1SccWrappers_Vector2d_REQUIRED_BITS_FOR_ENCODING        209

flag asn1SccWrappers_Vector2d_Encode(const asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D		5554  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA		5548  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR2D_DATA_ELM_2		5543  /**/
flag asn1SccWrappers_Vector2d_Decode(asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_VECTOR2D		5555  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR2D_DATA		5549  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR2D_DATA_ELM		5538  /**/
#define asn1SccWrappers_Vector2d_REQUIRED_BYTES_FOR_ACN_ENCODING       27 
#define asn1SccWrappers_Vector2d_REQUIRED_BITS_FOR_ACN_ENCODING        209

flag asn1SccWrappers_Vector2d_ACN_Encode(const asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_VECTOR2D		5556  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR2D_DATA		5550  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR2D_DATA_ELM		5539  /**/
flag asn1SccWrappers_Vector2d_ACN_Decode(asn1SccWrappers_Vector2d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Pose2D --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector2d position;
    asn1SccT_Double orientation;

} asn1SccBase_Pose2D;

void asn1SccBase_Pose2D_Initialize(asn1SccBase_Pose2D* pVal);

#define ERR_BASE_POSE2D_POSITION_DATA_ELM		933  /**/
#define ERR_BASE_POSE2D_POSITION_DATA		944  /**/
#define ERR_BASE_POSE2D_ORIENTATION		961  /**/
flag asn1SccBase_Pose2D_IsConstraintValid(const asn1SccBase_Pose2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D		972  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_POSITION_2		957  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_ORIENTATION_2		968  /**/
#define asn1SccBase_Pose2D_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccBase_Pose2D_REQUIRED_BITS_FOR_ENCODING        313

flag asn1SccBase_Pose2D_Encode(const asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D		973  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_POSITION_2		958  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_ORIENTATION_2		969  /**/
flag asn1SccBase_Pose2D_Decode(asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_POSE2D		974  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_POSITION		953  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_POSITION_DATA		947  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_POSITION_DATA_ELM		936  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_ORIENTATION		964  /**/
#define asn1SccBase_Pose2D_REQUIRED_BYTES_FOR_ACN_ENCODING       40 
#define asn1SccBase_Pose2D_REQUIRED_BITS_FOR_ACN_ENCODING        313

flag asn1SccBase_Pose2D_ACN_Encode(const asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_POSE2D		975  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_POSITION		954  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_POSITION_DATA		948  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_POSITION_DATA_ELM		937  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_ORIENTATION		965  /**/
flag asn1SccBase_Pose2D_ACN_Decode(asn1SccBase_Pose2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Pose2D_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector2d position;
    asn1SccT_Double orientation;

} asn1SccBase_Pose2D_m;

void asn1SccBase_Pose2D_m_Initialize(asn1SccBase_Pose2D_m* pVal);

#define ERR_BASE_POSE2D_M_POSITION_DATA_ELM		5888  /**/
#define ERR_BASE_POSE2D_M_POSITION_DATA		5899  /**/
#define ERR_BASE_POSE2D_M_ORIENTATION		5916  /**/
flag asn1SccBase_Pose2D_m_IsConstraintValid(const asn1SccBase_Pose2D_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE2D_M		5927  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_POSITION_2		5912  /**/
#define ERR_UPER_ENCODE_BASE_POSE2D_M_ORIENTATION_2		5923  /**/
#define asn1SccBase_Pose2D_m_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccBase_Pose2D_m_REQUIRED_BITS_FOR_ENCODING        313

flag asn1SccBase_Pose2D_m_Encode(const asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE2D_M		5928  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_POSITION_2		5913  /**/
#define ERR_UPER_DECODE_BASE_POSE2D_M_ORIENTATION_2		5924  /**/
flag asn1SccBase_Pose2D_m_Decode(asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_POSE2D_M		5929  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_M_POSITION		5908  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_M_POSITION_DATA		5902  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_M_POSITION_DATA_ELM		5891  /**/
#define ERR_ACN_ENCODE_BASE_POSE2D_M_ORIENTATION		5919  /**/
#define asn1SccBase_Pose2D_m_REQUIRED_BYTES_FOR_ACN_ENCODING       40 
#define asn1SccBase_Pose2D_m_REQUIRED_BITS_FOR_ACN_ENCODING        313

flag asn1SccBase_Pose2D_m_ACN_Encode(const asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_POSE2D_M		5930  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_M_POSITION		5909  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_M_POSITION_DATA		5903  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_M_POSITION_DATA_ELM		5892  /**/
#define ERR_ACN_DECODE_BASE_POSE2D_M_ORIENTATION		5920  /**/
flag asn1SccBase_Pose2D_m_ACN_Decode(asn1SccBase_Pose2D_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Matrix2d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccWrappers_Matrix2d_data;

typedef struct {
    asn1SccWrappers_Matrix2d_data data;

} asn1SccWrappers_Matrix2d;

void asn1SccWrappers_Matrix2d_data_Initialize(asn1SccWrappers_Matrix2d_data* pVal);
void asn1SccWrappers_Matrix2d_Initialize(asn1SccWrappers_Matrix2d* pVal);

#define ERR_WRAPPERS_MATRIX2D_DATA_ELM		5559  /**/
#define ERR_WRAPPERS_MATRIX2D_DATA		5570  /**/
flag asn1SccWrappers_Matrix2d_IsConstraintValid(const asn1SccWrappers_Matrix2d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D		5577  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA		5571  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5566  /**/
#define asn1SccWrappers_Matrix2d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Matrix2d_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Matrix2d_Encode(const asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D		5578  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA		5572  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX2D_DATA_ELM_2		5567  /**/
flag asn1SccWrappers_Matrix2d_Decode(asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_MATRIX2D		5579  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX2D_DATA		5573  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX2D_DATA_ELM		5562  /**/
#define asn1SccWrappers_Matrix2d_REQUIRED_BYTES_FOR_ACN_ENCODING       53 
#define asn1SccWrappers_Matrix2d_REQUIRED_BITS_FOR_ACN_ENCODING        418

flag asn1SccWrappers_Matrix2d_ACN_Encode(const asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_MATRIX2D		5580  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX2D_DATA		5574  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX2D_DATA_ELM		5563  /**/
flag asn1SccWrappers_Matrix2d_ACN_Decode(asn1SccWrappers_Matrix2d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Vector3d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_Vector3d_data;

typedef struct {
    asn1SccWrappers_Vector3d_data data;

} asn1SccWrappers_Vector3d;

void asn1SccWrappers_Vector3d_data_Initialize(asn1SccWrappers_Vector3d_data* pVal);
void asn1SccWrappers_Vector3d_Initialize(asn1SccWrappers_Vector3d* pVal);

#define ERR_WRAPPERS_VECTOR3D_DATA_ELM		5583  /**/
#define ERR_WRAPPERS_VECTOR3D_DATA		5594  /**/
flag asn1SccWrappers_Vector3d_IsConstraintValid(const asn1SccWrappers_Vector3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D		5601  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA		5595  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5590  /**/
#define asn1SccWrappers_Vector3d_REQUIRED_BYTES_FOR_ENCODING       40 
#define asn1SccWrappers_Vector3d_REQUIRED_BITS_FOR_ENCODING        314

flag asn1SccWrappers_Vector3d_Encode(const asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D		5602  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA		5596  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR3D_DATA_ELM_2		5591  /**/
flag asn1SccWrappers_Vector3d_Decode(asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_VECTOR3D		5603  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR3D_DATA		5597  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR3D_DATA_ELM		5586  /**/
#define asn1SccWrappers_Vector3d_REQUIRED_BYTES_FOR_ACN_ENCODING       40 
#define asn1SccWrappers_Vector3d_REQUIRED_BITS_FOR_ACN_ENCODING        314

flag asn1SccWrappers_Vector3d_ACN_Encode(const asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_VECTOR3D		5604  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR3D_DATA		5598  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR3D_DATA_ELM		5587  /**/
flag asn1SccWrappers_Vector3d_ACN_Decode(asn1SccWrappers_Vector3d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Wrench --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;

} asn1SccBase_Wrench;

void asn1SccBase_Wrench_Initialize(asn1SccBase_Wrench* pVal);

#define ERR_BASE_WRENCH_FORCE_DATA_ELM		793  /**/
#define ERR_BASE_WRENCH_FORCE_DATA		804  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA_ELM		821  /**/
#define ERR_BASE_WRENCH_TORQUE_DATA		832  /**/
flag asn1SccBase_Wrench_IsConstraintValid(const asn1SccBase_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH		849  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_FORCE_2		817  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_TORQUE_2		845  /**/
#define asn1SccBase_Wrench_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Wrench_REQUIRED_BITS_FOR_ENCODING        628

flag asn1SccBase_Wrench_Encode(const asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH		850  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_FORCE_2		818  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_TORQUE_2		846  /**/
flag asn1SccBase_Wrench_Decode(asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_WRENCH		851  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_FORCE		813  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_FORCE_DATA		807  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_FORCE_DATA_ELM		796  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_TORQUE		841  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_TORQUE_DATA		835  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_TORQUE_DATA_ELM		824  /**/
#define asn1SccBase_Wrench_REQUIRED_BYTES_FOR_ACN_ENCODING       79 
#define asn1SccBase_Wrench_REQUIRED_BITS_FOR_ACN_ENCODING        628

flag asn1SccBase_Wrench_ACN_Encode(const asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_WRENCH		852  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_FORCE		814  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_FORCE_DATA		808  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_FORCE_DATA_ELM		797  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_TORQUE		842  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_TORQUE_DATA		836  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_TORQUE_DATA_ELM		825  /**/
flag asn1SccBase_Wrench_ACN_Decode(asn1SccBase_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Waypoint --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;

} asn1SccBase_Waypoint;

void asn1SccBase_Waypoint_Initialize(asn1SccBase_Waypoint* pVal);

#define ERR_BASE_WAYPOINT_POSITION_DATA_ELM		1164  /**/
#define ERR_BASE_WAYPOINT_POSITION_DATA		1175  /**/
#define ERR_BASE_WAYPOINT_HEADING		1192  /**/
#define ERR_BASE_WAYPOINT_TOL_POSITION		1203  /**/
#define ERR_BASE_WAYPOINT_TOL_HEADING		1214  /**/
flag asn1SccBase_Waypoint_IsConstraintValid(const asn1SccBase_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT		1225  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_POSITION_2		1188  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_HEADING_2		1199  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_POSITION_2		1210  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_TOL_HEADING_2		1221  /**/
#define asn1SccBase_Waypoint_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Waypoint_REQUIRED_BITS_FOR_ENCODING        626

flag asn1SccBase_Waypoint_Encode(const asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT		1226  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_POSITION_2		1189  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_HEADING_2		1200  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_POSITION_2		1211  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_TOL_HEADING_2		1222  /**/
flag asn1SccBase_Waypoint_Decode(asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_WAYPOINT		1227  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_POSITION		1184  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_POSITION_DATA		1178  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_POSITION_DATA_ELM		1167  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_HEADING		1195  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_TOL_POSITION		1206  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_TOL_HEADING		1217  /**/
#define asn1SccBase_Waypoint_REQUIRED_BYTES_FOR_ACN_ENCODING       79 
#define asn1SccBase_Waypoint_REQUIRED_BITS_FOR_ACN_ENCODING        626

flag asn1SccBase_Waypoint_ACN_Encode(const asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_WAYPOINT		1228  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_POSITION		1185  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_POSITION_DATA		1179  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_POSITION_DATA_ELM		1168  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_HEADING		1196  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_TOL_POSITION		1207  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_TOL_HEADING		1218  /**/
flag asn1SccBase_Waypoint_ACN_Decode(asn1SccBase_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Waypoint_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccT_Double heading;
    asn1SccT_Double tol_position;
    asn1SccT_Double tol_heading;

} asn1SccBase_Waypoint_m;

void asn1SccBase_Waypoint_m_Initialize(asn1SccBase_Waypoint_m* pVal);

#define ERR_BASE_WAYPOINT_M_POSITION_DATA_ELM		6197  /**/
#define ERR_BASE_WAYPOINT_M_POSITION_DATA		6208  /**/
#define ERR_BASE_WAYPOINT_M_HEADING		6225  /**/
#define ERR_BASE_WAYPOINT_M_TOL_POSITION		6236  /**/
#define ERR_BASE_WAYPOINT_M_TOL_HEADING		6247  /**/
flag asn1SccBase_Waypoint_m_IsConstraintValid(const asn1SccBase_Waypoint_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WAYPOINT_M		6258  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_POSITION_2		6221  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_HEADING_2		6232  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_POSITION_2		6243  /**/
#define ERR_UPER_ENCODE_BASE_WAYPOINT_M_TOL_HEADING_2		6254  /**/
#define asn1SccBase_Waypoint_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Waypoint_m_REQUIRED_BITS_FOR_ENCODING        626

flag asn1SccBase_Waypoint_m_Encode(const asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WAYPOINT_M		6259  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_POSITION_2		6222  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_HEADING_2		6233  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_POSITION_2		6244  /**/
#define ERR_UPER_DECODE_BASE_WAYPOINT_M_TOL_HEADING_2		6255  /**/
flag asn1SccBase_Waypoint_m_Decode(asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_WAYPOINT_M		6260  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_M_POSITION		6217  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_M_POSITION_DATA		6211  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_M_POSITION_DATA_ELM		6200  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_M_HEADING		6228  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_M_TOL_POSITION		6239  /**/
#define ERR_ACN_ENCODE_BASE_WAYPOINT_M_TOL_HEADING		6250  /**/
#define asn1SccBase_Waypoint_m_REQUIRED_BYTES_FOR_ACN_ENCODING       79 
#define asn1SccBase_Waypoint_m_REQUIRED_BITS_FOR_ACN_ENCODING        626

flag asn1SccBase_Waypoint_m_ACN_Encode(const asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_WAYPOINT_M		6261  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_M_POSITION		6218  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_M_POSITION_DATA		6212  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_M_POSITION_DATA_ELM		6201  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_M_HEADING		6229  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_M_TOL_POSITION		6240  /**/
#define ERR_ACN_DECODE_BASE_WAYPOINT_M_TOL_HEADING		6251  /**/
flag asn1SccBase_Waypoint_m_ACN_Decode(asn1SccBase_Waypoint_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccBase_Waypoint_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint;

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA_ELM		225  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA		236  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_HEADING		253  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_POSITION		264  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_HEADING		275  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		296  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		297  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		292  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BYTES_FOR_ENCODING       15651 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BITS_FOR_ENCODING        125208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		298  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_2		293  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		299  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM		288  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION		245  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA		239  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA_ELM		228  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_HEADING		256  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_POSITION		267  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_HEADING		278  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BYTES_FOR_ACN_ENCODING       15651 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_REQUIRED_BITS_FOR_ACN_ENCODING        125208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_ACN_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT		300  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM		289  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION		246  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA		240  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_POSITION_DATA_ELM		229  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_HEADING		257  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_POSITION		268  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WAYPOINT_ELM_TOL_HEADING		279  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint_ACN_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Waypoint* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Wrench_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;

} asn1SccBase_Wrench_m;

void asn1SccBase_Wrench_m_Initialize(asn1SccBase_Wrench_m* pVal);

#define ERR_BASE_WRENCH_M_FORCE_DATA_ELM		6264  /**/
#define ERR_BASE_WRENCH_M_FORCE_DATA		6275  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA_ELM		6292  /**/
#define ERR_BASE_WRENCH_M_TORQUE_DATA		6303  /**/
flag asn1SccBase_Wrench_m_IsConstraintValid(const asn1SccBase_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_WRENCH_M		6320  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_FORCE_2		6288  /**/
#define ERR_UPER_ENCODE_BASE_WRENCH_M_TORQUE_2		6316  /**/
#define asn1SccBase_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccBase_Wrench_m_REQUIRED_BITS_FOR_ENCODING        628

flag asn1SccBase_Wrench_m_Encode(const asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_WRENCH_M		6321  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_FORCE_2		6289  /**/
#define ERR_UPER_DECODE_BASE_WRENCH_M_TORQUE_2		6317  /**/
flag asn1SccBase_Wrench_m_Decode(asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_WRENCH_M		6322  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_M_FORCE		6284  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_M_FORCE_DATA		6278  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_M_FORCE_DATA_ELM		6267  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_M_TORQUE		6312  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_M_TORQUE_DATA		6306  /**/
#define ERR_ACN_ENCODE_BASE_WRENCH_M_TORQUE_DATA_ELM		6295  /**/
#define asn1SccBase_Wrench_m_REQUIRED_BYTES_FOR_ACN_ENCODING       79 
#define asn1SccBase_Wrench_m_REQUIRED_BITS_FOR_ACN_ENCODING        628

flag asn1SccBase_Wrench_m_ACN_Encode(const asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_WRENCH_M		6323  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_M_FORCE		6285  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_M_FORCE_DATA		6279  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_M_FORCE_DATA_ELM		6268  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_M_TORQUE		6313  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_M_TORQUE_DATA		6307  /**/
#define ERR_ACN_DECODE_BASE_WRENCH_M_TORQUE_DATA_ELM		6296  /**/
flag asn1SccBase_Wrench_m_ACN_Decode(asn1SccBase_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccBase_Wrench_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench;

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA_ELM		303  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA		314  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA_ELM		331  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA		342  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		369  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		370  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		365  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BYTES_FOR_ENCODING       15701 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BITS_FOR_ENCODING        125608

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		371  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_2		366  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		372  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM		361  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE		323  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA		317  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA_ELM		306  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE		351  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA		345  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA_ELM		334  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BYTES_FOR_ACN_ENCODING       15701 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_REQUIRED_BITS_FOR_ACN_ENCODING        125608

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_ACN_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH		373  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM		362  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE		324  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA		318  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_FORCE_DATA_ELM		307  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE		352  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA		346  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_WRENCH_ELM_TORQUE_DATA_ELM		335  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench_ACN_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Matrix3d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[9];
} asn1SccWrappers_Matrix3d_data;

typedef struct {
    asn1SccWrappers_Matrix3d_data data;

} asn1SccWrappers_Matrix3d;

void asn1SccWrappers_Matrix3d_data_Initialize(asn1SccWrappers_Matrix3d_data* pVal);
void asn1SccWrappers_Matrix3d_Initialize(asn1SccWrappers_Matrix3d* pVal);

#define ERR_WRAPPERS_MATRIX3D_DATA_ELM		5607  /**/
#define ERR_WRAPPERS_MATRIX3D_DATA		5618  /**/
flag asn1SccWrappers_Matrix3d_IsConstraintValid(const asn1SccWrappers_Matrix3d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D		5625  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA		5619  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5614  /**/
#define asn1SccWrappers_Matrix3d_REQUIRED_BYTES_FOR_ENCODING       118 
#define asn1SccWrappers_Matrix3d_REQUIRED_BITS_FOR_ENCODING        940

flag asn1SccWrappers_Matrix3d_Encode(const asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D		5626  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA		5620  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX3D_DATA_ELM_2		5615  /**/
flag asn1SccWrappers_Matrix3d_Decode(asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_MATRIX3D		5627  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX3D_DATA		5621  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX3D_DATA_ELM		5610  /**/
#define asn1SccWrappers_Matrix3d_REQUIRED_BYTES_FOR_ACN_ENCODING       118 
#define asn1SccWrappers_Matrix3d_REQUIRED_BITS_FOR_ACN_ENCODING        940

flag asn1SccWrappers_Matrix3d_ACN_Encode(const asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_MATRIX3D		5628  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX3D_DATA		5622  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX3D_DATA_ELM		5611  /**/
flag asn1SccWrappers_Matrix3d_ACN_Decode(asn1SccWrappers_Matrix3d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Vector4d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[4];
} asn1SccWrappers_Vector4d_data;

typedef struct {
    asn1SccWrappers_Vector4d_data data;

} asn1SccWrappers_Vector4d;

void asn1SccWrappers_Vector4d_data_Initialize(asn1SccWrappers_Vector4d_data* pVal);
void asn1SccWrappers_Vector4d_Initialize(asn1SccWrappers_Vector4d* pVal);

#define ERR_WRAPPERS_VECTOR4D_DATA_ELM		5631  /**/
#define ERR_WRAPPERS_VECTOR4D_DATA		5642  /**/
flag asn1SccWrappers_Vector4d_IsConstraintValid(const asn1SccWrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D		5649  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA		5643  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5638  /**/
#define asn1SccWrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Vector4d_Encode(const asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D		5650  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA		5644  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR4D_DATA_ELM_2		5639  /**/
flag asn1SccWrappers_Vector4d_Decode(asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_VECTOR4D		5651  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR4D_DATA		5645  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR4D_DATA_ELM		5634  /**/
#define asn1SccWrappers_Vector4d_REQUIRED_BYTES_FOR_ACN_ENCODING       53 
#define asn1SccWrappers_Vector4d_REQUIRED_BITS_FOR_ACN_ENCODING        418

flag asn1SccWrappers_Vector4d_ACN_Encode(const asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_VECTOR4D		5652  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR4D_DATA		5646  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR4D_DATA_ELM		5635  /**/
flag asn1SccWrappers_Vector4d_ACN_Decode(asn1SccWrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccStd_vector_Wrappers_Vector4d;

void asn1SccStd_vector_Wrappers_Vector4d_Initialize(asn1SccStd_vector_Wrappers_Vector4d* pVal);

#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA_ELM		376  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA		387  /**/
#define ERR_STD_VECTOR_WRAPPERS_VECTOR4D		404  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_IsConstraintValid(const asn1SccStd_vector_Wrappers_Vector4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D		405  /**/
#define ERR_UPER_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		400  /**/
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BYTES_FOR_ENCODING       10451 
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BITS_FOR_ENCODING        83608

flag asn1SccStd_vector_Wrappers_Vector4d_Encode(const asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D		406  /**/
#define ERR_UPER_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_2		401  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_Decode(asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D		407  /**/
#define ERR_ACN_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM		396  /**/
#define ERR_ACN_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA		390  /**/
#define ERR_ACN_ENCODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA_ELM		379  /**/
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BYTES_FOR_ACN_ENCODING       10451 
#define asn1SccStd_vector_Wrappers_Vector4d_REQUIRED_BITS_FOR_ACN_ENCODING        83608

flag asn1SccStd_vector_Wrappers_Vector4d_ACN_Encode(const asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D		408  /**/
#define ERR_ACN_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM		397  /**/
#define ERR_ACN_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA		391  /**/
#define ERR_ACN_DECODE_STD_VECTOR_WRAPPERS_VECTOR4D_ELM_DATA_ELM		380  /**/
flag asn1SccStd_vector_Wrappers_Vector4d_ACN_Decode(asn1SccStd_vector_Wrappers_Vector4d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Matrix4d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[16];
} asn1SccWrappers_Matrix4d_data;

typedef struct {
    asn1SccWrappers_Matrix4d_data data;

} asn1SccWrappers_Matrix4d;

void asn1SccWrappers_Matrix4d_data_Initialize(asn1SccWrappers_Matrix4d_data* pVal);
void asn1SccWrappers_Matrix4d_Initialize(asn1SccWrappers_Matrix4d* pVal);

#define ERR_WRAPPERS_MATRIX4D_DATA_ELM		5655  /**/
#define ERR_WRAPPERS_MATRIX4D_DATA		5666  /**/
flag asn1SccWrappers_Matrix4d_IsConstraintValid(const asn1SccWrappers_Matrix4d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D		5673  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA		5667  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5662  /**/
#define asn1SccWrappers_Matrix4d_REQUIRED_BYTES_FOR_ENCODING       209 
#define asn1SccWrappers_Matrix4d_REQUIRED_BITS_FOR_ENCODING        1668

flag asn1SccWrappers_Matrix4d_Encode(const asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D		5674  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA		5668  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX4D_DATA_ELM_2		5663  /**/
flag asn1SccWrappers_Matrix4d_Decode(asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_MATRIX4D		5675  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX4D_DATA		5669  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX4D_DATA_ELM		5658  /**/
#define asn1SccWrappers_Matrix4d_REQUIRED_BYTES_FOR_ACN_ENCODING       209 
#define asn1SccWrappers_Matrix4d_REQUIRED_BITS_FOR_ACN_ENCODING        1668

flag asn1SccWrappers_Matrix4d_ACN_Encode(const asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_MATRIX4D		5676  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX4D_DATA		5670  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX4D_DATA_ELM		5659  /**/
flag asn1SccWrappers_Matrix4d_ACN_Decode(asn1SccWrappers_Matrix4d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Vector6d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[6];
} asn1SccWrappers_Vector6d_data;

typedef struct {
    asn1SccWrappers_Vector6d_data data;

} asn1SccWrappers_Vector6d;

void asn1SccWrappers_Vector6d_data_Initialize(asn1SccWrappers_Vector6d_data* pVal);
void asn1SccWrappers_Vector6d_Initialize(asn1SccWrappers_Vector6d* pVal);

#define ERR_WRAPPERS_VECTOR6D_DATA_ELM		5679  /**/
#define ERR_WRAPPERS_VECTOR6D_DATA		5690  /**/
flag asn1SccWrappers_Vector6d_IsConstraintValid(const asn1SccWrappers_Vector6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D		5697  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA		5691  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5686  /**/
#define asn1SccWrappers_Vector6d_REQUIRED_BYTES_FOR_ENCODING       79 
#define asn1SccWrappers_Vector6d_REQUIRED_BITS_FOR_ENCODING        627

flag asn1SccWrappers_Vector6d_Encode(const asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D		5698  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA		5692  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTOR6D_DATA_ELM_2		5687  /**/
flag asn1SccWrappers_Vector6d_Decode(asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_VECTOR6D		5699  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR6D_DATA		5693  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTOR6D_DATA_ELM		5682  /**/
#define asn1SccWrappers_Vector6d_REQUIRED_BYTES_FOR_ACN_ENCODING       79 
#define asn1SccWrappers_Vector6d_REQUIRED_BITS_FOR_ACN_ENCODING        627

flag asn1SccWrappers_Vector6d_ACN_Encode(const asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_VECTOR6D		5700  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR6D_DATA		5694  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTOR6D_DATA_ELM		5683  /**/
flag asn1SccWrappers_Vector6d_ACN_Decode(asn1SccWrappers_Vector6d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Matrix6d --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[36];
} asn1SccWrappers_Matrix6d_data;

typedef struct {
    asn1SccWrappers_Matrix6d_data data;

} asn1SccWrappers_Matrix6d;

void asn1SccWrappers_Matrix6d_data_Initialize(asn1SccWrappers_Matrix6d_data* pVal);
void asn1SccWrappers_Matrix6d_Initialize(asn1SccWrappers_Matrix6d* pVal);

#define ERR_WRAPPERS_MATRIX6D_DATA_ELM		5703  /**/
#define ERR_WRAPPERS_MATRIX6D_DATA		5714  /**/
flag asn1SccWrappers_Matrix6d_IsConstraintValid(const asn1SccWrappers_Matrix6d* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D		5721  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA		5715  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5710  /**/
#define asn1SccWrappers_Matrix6d_REQUIRED_BYTES_FOR_ENCODING       469 
#define asn1SccWrappers_Matrix6d_REQUIRED_BITS_FOR_ENCODING        3750

flag asn1SccWrappers_Matrix6d_Encode(const asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D		5722  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA		5716  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIX6D_DATA_ELM_2		5711  /**/
flag asn1SccWrappers_Matrix6d_Decode(asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_MATRIX6D		5723  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX6D_DATA		5717  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIX6D_DATA_ELM		5706  /**/
#define asn1SccWrappers_Matrix6d_REQUIRED_BYTES_FOR_ACN_ENCODING       469 
#define asn1SccWrappers_Matrix6d_REQUIRED_BITS_FOR_ACN_ENCODING        3750

flag asn1SccWrappers_Matrix6d_ACN_Encode(const asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_MATRIX6D		5724  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX6D_DATA		5718  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIX6D_DATA_ELM		5707  /**/
flag asn1SccWrappers_Matrix6d_ACN_Decode(asn1SccWrappers_Matrix6d* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_TwistWithCovariance --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d vel;
    asn1SccWrappers_Vector3d rot;
    asn1SccWrappers_Matrix6d cov;

} asn1SccBase_TwistWithCovariance;

void asn1SccBase_TwistWithCovariance_Initialize(asn1SccBase_TwistWithCovariance* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA_ELM		703  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_VEL_DATA		714  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA_ELM		731  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_ROT_DATA		742  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA_ELM		759  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_COV_DATA		770  /**/
flag asn1SccBase_TwistWithCovariance_IsConstraintValid(const asn1SccBase_TwistWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE		787  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL_2		727  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT_2		755  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_COV_2		783  /**/
#define asn1SccBase_TwistWithCovariance_REQUIRED_BYTES_FOR_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_REQUIRED_BITS_FOR_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_Encode(const asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE		788  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_VEL_2		728  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_ROT_2		756  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_COV_2		784  /**/
flag asn1SccBase_TwistWithCovariance_Decode(asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE		789  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL		723  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL_DATA		717  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_VEL_DATA_ELM		706  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT		751  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT_DATA		745  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_ROT_DATA_ELM		734  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_COV		779  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_COV_DATA		773  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_COV_DATA_ELM		762  /**/
#define asn1SccBase_TwistWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_ACN_Encode(const asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE		790  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_VEL		724  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_VEL_DATA		718  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_VEL_DATA_ELM		707  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_ROT		752  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_ROT_DATA		746  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_ROT_DATA_ELM		735  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_COV		780  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_COV_DATA		774  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_COV_DATA_ELM		763  /**/
flag asn1SccBase_TwistWithCovariance_ACN_Decode(asn1SccBase_TwistWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_TwistWithCovariance_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d vel;
    asn1SccWrappers_Vector3d rot;
    asn1SccWrappers_Matrix6d cov;

} asn1SccBase_TwistWithCovariance_m;

void asn1SccBase_TwistWithCovariance_m_Initialize(asn1SccBase_TwistWithCovariance_m* pVal);

#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA_ELM		6107  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA		6118  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA_ELM		6135  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA		6146  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA_ELM		6163  /**/
#define ERR_BASE_TWISTWITHCOVARIANCE_M_COV_DATA		6174  /**/
flag asn1SccBase_TwistWithCovariance_m_IsConstraintValid(const asn1SccBase_TwistWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M		6191  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6131  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6159  /**/
#define ERR_UPER_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6187  /**/
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_m_Encode(const asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M		6192  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL_2		6132  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT_2		6160  /**/
#define ERR_UPER_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV_2		6188  /**/
flag asn1SccBase_TwistWithCovariance_m_Decode(asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M		6193  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL		6127  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA		6121  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA_ELM		6110  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT		6155  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA		6149  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA_ELM		6138  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV		6183  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV_DATA		6177  /**/
#define ERR_ACN_ENCODE_BASE_TWISTWITHCOVARIANCE_M_COV_DATA_ELM		6166  /**/
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BYTES_FOR_ACN_ENCODING       548 
#define asn1SccBase_TwistWithCovariance_m_REQUIRED_BITS_FOR_ACN_ENCODING        4378

flag asn1SccBase_TwistWithCovariance_m_ACN_Encode(const asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M		6194  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL		6128  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA		6122  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_VEL_DATA_ELM		6111  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT		6156  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA		6150  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_ROT_DATA_ELM		6139  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV		6184  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV_DATA		6178  /**/
#define ERR_ACN_DECODE_BASE_TWISTWITHCOVARIANCE_M_COV_DATA_ELM		6167  /**/
flag asn1SccBase_TwistWithCovariance_m_ACN_Decode(asn1SccBase_TwistWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_MatrixXd --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_MatrixXd_data;

typedef struct {
    asn1SccT_Int32 rows;
    asn1SccT_Int32 cols;
    asn1SccWrappers_MatrixXd_data data;

} asn1SccWrappers_MatrixXd;

void asn1SccWrappers_MatrixXd_data_Initialize(asn1SccWrappers_MatrixXd_data* pVal);
void asn1SccWrappers_MatrixXd_Initialize(asn1SccWrappers_MatrixXd* pVal);

#define ERR_WRAPPERS_MATRIXXD_ROWS		5727  /**/
#define ERR_WRAPPERS_MATRIXXD_COLS		5738  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA_ELM		5749  /**/
#define ERR_WRAPPERS_MATRIXXD_DATA		5760  /**/
flag asn1SccWrappers_MatrixXd_IsConstraintValid(const asn1SccWrappers_MatrixXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD		5767  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_ROWS_2		5734  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_COLS_2		5745  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA		5761  /**/
#define ERR_UPER_ENCODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5756  /**/
#define asn1SccWrappers_MatrixXd_REQUIRED_BYTES_FOR_ENCODING       2609 
#define asn1SccWrappers_MatrixXd_REQUIRED_BITS_FOR_ENCODING        20872

flag asn1SccWrappers_MatrixXd_Encode(const asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD		5768  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_ROWS_2		5735  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_COLS_2		5746  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA		5762  /**/
#define ERR_UPER_DECODE_WRAPPERS_MATRIXXD_DATA_ELM_2		5757  /**/
flag asn1SccWrappers_MatrixXd_Decode(asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_MATRIXXD		5769  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIXXD_ROWS		5730  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIXXD_COLS		5741  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIXXD_DATA		5763  /**/
#define ERR_ACN_ENCODE_WRAPPERS_MATRIXXD_DATA_ELM		5752  /**/
#define asn1SccWrappers_MatrixXd_REQUIRED_BYTES_FOR_ACN_ENCODING       2609 
#define asn1SccWrappers_MatrixXd_REQUIRED_BITS_FOR_ACN_ENCODING        20872

flag asn1SccWrappers_MatrixXd_ACN_Encode(const asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_MATRIXXD		5770  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIXXD_ROWS		5731  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIXXD_COLS		5742  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIXXD_DATA		5764  /**/
#define ERR_ACN_DECODE_WRAPPERS_MATRIXXD_DATA_ELM		5753  /**/
flag asn1SccWrappers_MatrixXd_ACN_Decode(asn1SccWrappers_MatrixXd* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_Quaterniond --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[3];
} asn1SccWrappers_Quaterniond_im;

typedef struct {
    asn1SccWrappers_Quaterniond_im im;
    asn1SccT_Double re;

} asn1SccWrappers_Quaterniond;

void asn1SccWrappers_Quaterniond_im_Initialize(asn1SccWrappers_Quaterniond_im* pVal);
void asn1SccWrappers_Quaterniond_Initialize(asn1SccWrappers_Quaterniond* pVal);

#define ERR_WRAPPERS_QUATERNIOND_IM_ELM		5773  /**/
#define ERR_WRAPPERS_QUATERNIOND_IM		5784  /**/
#define ERR_WRAPPERS_QUATERNIOND_RE		5791  /**/
flag asn1SccWrappers_Quaterniond_IsConstraintValid(const asn1SccWrappers_Quaterniond* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND		5802  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM		5785  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5780  /**/
#define ERR_UPER_ENCODE_WRAPPERS_QUATERNIOND_RE_2		5798  /**/
#define asn1SccWrappers_Quaterniond_REQUIRED_BYTES_FOR_ENCODING       53 
#define asn1SccWrappers_Quaterniond_REQUIRED_BITS_FOR_ENCODING        418

flag asn1SccWrappers_Quaterniond_Encode(const asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND		5803  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM		5786  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_IM_ELM_2		5781  /**/
#define ERR_UPER_DECODE_WRAPPERS_QUATERNIOND_RE_2		5799  /**/
flag asn1SccWrappers_Quaterniond_Decode(asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_QUATERNIOND		5804  /**/
#define ERR_ACN_ENCODE_WRAPPERS_QUATERNIOND_IM		5787  /**/
#define ERR_ACN_ENCODE_WRAPPERS_QUATERNIOND_IM_ELM		5776  /**/
#define ERR_ACN_ENCODE_WRAPPERS_QUATERNIOND_RE		5794  /**/
#define asn1SccWrappers_Quaterniond_REQUIRED_BYTES_FOR_ACN_ENCODING       53 
#define asn1SccWrappers_Quaterniond_REQUIRED_BITS_FOR_ACN_ENCODING        418

flag asn1SccWrappers_Quaterniond_ACN_Encode(const asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_QUATERNIOND		5805  /**/
#define ERR_ACN_DECODE_WRAPPERS_QUATERNIOND_IM		5788  /**/
#define ERR_ACN_DECODE_WRAPPERS_QUATERNIOND_IM_ELM		5777  /**/
#define ERR_ACN_DECODE_WRAPPERS_QUATERNIOND_RE		5795  /**/
flag asn1SccWrappers_Quaterniond_ACN_Decode(asn1SccWrappers_Quaterniond* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Pose --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Quaterniond orientation;

} asn1SccBase_Pose;

void asn1SccBase_Pose_Initialize(asn1SccBase_Pose* pVal);

#define ERR_BASE_POSE_POSITION_DATA_ELM		529  /**/
#define ERR_BASE_POSE_POSITION_DATA		540  /**/
#define ERR_BASE_POSE_ORIENTATION_IM_ELM		557  /**/
#define ERR_BASE_POSE_ORIENTATION_IM		568  /**/
#define ERR_BASE_POSE_ORIENTATION_RE		575  /**/
flag asn1SccBase_Pose_IsConstraintValid(const asn1SccBase_Pose* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE		596  /**/
#define ERR_UPER_ENCODE_BASE_POSE_POSITION_2		553  /**/
#define ERR_UPER_ENCODE_BASE_POSE_ORIENTATION_2		592  /**/
#define asn1SccBase_Pose_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccBase_Pose_REQUIRED_BITS_FOR_ENCODING        732

flag asn1SccBase_Pose_Encode(const asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE		597  /**/
#define ERR_UPER_DECODE_BASE_POSE_POSITION_2		554  /**/
#define ERR_UPER_DECODE_BASE_POSE_ORIENTATION_2		593  /**/
flag asn1SccBase_Pose_Decode(asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_POSE		598  /**/
#define ERR_ACN_ENCODE_BASE_POSE_POSITION		549  /**/
#define ERR_ACN_ENCODE_BASE_POSE_POSITION_DATA		543  /**/
#define ERR_ACN_ENCODE_BASE_POSE_POSITION_DATA_ELM		532  /**/
#define ERR_ACN_ENCODE_BASE_POSE_ORIENTATION		588  /**/
#define ERR_ACN_ENCODE_BASE_POSE_ORIENTATION_IM		571  /**/
#define ERR_ACN_ENCODE_BASE_POSE_ORIENTATION_IM_ELM		560  /**/
#define ERR_ACN_ENCODE_BASE_POSE_ORIENTATION_RE		578  /**/
#define asn1SccBase_Pose_REQUIRED_BYTES_FOR_ACN_ENCODING       92 
#define asn1SccBase_Pose_REQUIRED_BITS_FOR_ACN_ENCODING        732

flag asn1SccBase_Pose_ACN_Encode(const asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_POSE		599  /**/
#define ERR_ACN_DECODE_BASE_POSE_POSITION		550  /**/
#define ERR_ACN_DECODE_BASE_POSE_POSITION_DATA		544  /**/
#define ERR_ACN_DECODE_BASE_POSE_POSITION_DATA_ELM		533  /**/
#define ERR_ACN_DECODE_BASE_POSE_ORIENTATION		589  /**/
#define ERR_ACN_DECODE_BASE_POSE_ORIENTATION_IM		572  /**/
#define ERR_ACN_DECODE_BASE_POSE_ORIENTATION_IM_ELM		561  /**/
#define ERR_ACN_DECODE_BASE_POSE_ORIENTATION_RE		579  /**/
flag asn1SccBase_Pose_ACN_Decode(asn1SccBase_Pose* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_TransformWithCovariance --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d translation;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix6d cov;

} asn1SccBase_TransformWithCovariance;

void asn1SccBase_TransformWithCovariance_Initialize(asn1SccBase_TransformWithCovariance* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA_ELM		602  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA		613  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM_ELM		630  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM		641  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_RE		648  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA_ELM		669  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA		680  /**/
flag asn1SccBase_TransformWithCovariance_IsConstraintValid(const asn1SccBase_TransformWithCovariance* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE		697  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		626  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		665  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		693  /**/
#define asn1SccBase_TransformWithCovariance_REQUIRED_BYTES_FOR_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_REQUIRED_BITS_FOR_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_Encode(const asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE		698  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_2		627  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_2		666  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV_2		694  /**/
flag asn1SccBase_TransformWithCovariance_Decode(asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE		699  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION		622  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA		616  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA_ELM		605  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION		661  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM		644  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM_ELM		633  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_RE		651  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV		689  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA		683  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA_ELM		672  /**/
#define asn1SccBase_TransformWithCovariance_REQUIRED_BYTES_FOR_ACN_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_REQUIRED_BITS_FOR_ACN_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_ACN_Encode(const asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE		700  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION		623  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA		617  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_TRANSLATION_DATA_ELM		606  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION		662  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM		645  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_IM_ELM		634  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_ORIENTATION_RE		652  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV		690  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA		684  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_COV_DATA_ELM		673  /**/
flag asn1SccBase_TransformWithCovariance_ACN_Decode(asn1SccBase_TransformWithCovariance* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Pose_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Quaterniond orientation;

} asn1SccBase_Pose_m;

void asn1SccBase_Pose_m_Initialize(asn1SccBase_Pose_m* pVal);

#define ERR_BASE_POSE_M_POSITION_DATA_ELM		5933  /**/
#define ERR_BASE_POSE_M_POSITION_DATA		5944  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM_ELM		5961  /**/
#define ERR_BASE_POSE_M_ORIENTATION_IM		5972  /**/
#define ERR_BASE_POSE_M_ORIENTATION_RE		5979  /**/
flag asn1SccBase_Pose_m_IsConstraintValid(const asn1SccBase_Pose_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_POSE_M		6000  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_POSITION_2		5957  /**/
#define ERR_UPER_ENCODE_BASE_POSE_M_ORIENTATION_2		5996  /**/
#define asn1SccBase_Pose_m_REQUIRED_BYTES_FOR_ENCODING       92 
#define asn1SccBase_Pose_m_REQUIRED_BITS_FOR_ENCODING        732

flag asn1SccBase_Pose_m_Encode(const asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_POSE_M		6001  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_POSITION_2		5958  /**/
#define ERR_UPER_DECODE_BASE_POSE_M_ORIENTATION_2		5997  /**/
flag asn1SccBase_Pose_m_Decode(asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_POSE_M		6002  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_POSITION		5953  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_POSITION_DATA		5947  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_POSITION_DATA_ELM		5936  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_ORIENTATION		5992  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_ORIENTATION_IM		5975  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_ORIENTATION_IM_ELM		5964  /**/
#define ERR_ACN_ENCODE_BASE_POSE_M_ORIENTATION_RE		5982  /**/
#define asn1SccBase_Pose_m_REQUIRED_BYTES_FOR_ACN_ENCODING       92 
#define asn1SccBase_Pose_m_REQUIRED_BITS_FOR_ACN_ENCODING        732

flag asn1SccBase_Pose_m_ACN_Encode(const asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_POSE_M		6003  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_POSITION		5954  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_POSITION_DATA		5948  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_POSITION_DATA_ELM		5937  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_ORIENTATION		5993  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_ORIENTATION_IM		5976  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_ORIENTATION_IM_ELM		5965  /**/
#define ERR_ACN_DECODE_BASE_POSE_M_ORIENTATION_RE		5983  /**/
flag asn1SccBase_Pose_m_ACN_Decode(asn1SccBase_Pose_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_TransformWithCovariance_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d translation;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix6d cov;

} asn1SccBase_TransformWithCovariance_m;

void asn1SccBase_TransformWithCovariance_m_Initialize(asn1SccBase_TransformWithCovariance_m* pVal);

#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA_ELM		6006  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA		6017  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM_ELM		6034  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM		6045  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_RE		6052  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA_ELM		6073  /**/
#define ERR_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA		6084  /**/
flag asn1SccBase_TransformWithCovariance_m_IsConstraintValid(const asn1SccBase_TransformWithCovariance_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M		6101  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6030  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6069  /**/
#define ERR_UPER_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6097  /**/
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BYTES_FOR_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BITS_FOR_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_m_Encode(const asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M		6102  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_2		6031  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_2		6070  /**/
#define ERR_UPER_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_2		6098  /**/
flag asn1SccBase_TransformWithCovariance_m_Decode(asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M		6103  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION		6026  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA		6020  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA_ELM		6009  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION		6065  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM		6048  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM_ELM		6037  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_RE		6055  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV		6093  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA		6087  /**/
#define ERR_ACN_ENCODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA_ELM		6076  /**/
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BYTES_FOR_ACN_ENCODING       561 
#define asn1SccBase_TransformWithCovariance_m_REQUIRED_BITS_FOR_ACN_ENCODING        4482

flag asn1SccBase_TransformWithCovariance_m_ACN_Encode(const asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M		6104  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION		6027  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA		6021  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_TRANSLATION_DATA_ELM		6010  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION		6066  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM		6049  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_IM_ELM		6038  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_ORIENTATION_RE		6056  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV		6094  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA		6088  /**/
#define ERR_ACN_DECODE_BASE_TRANSFORMWITHCOVARIANCE_M_COV_DATA_ELM		6077  /**/
flag asn1SccBase_TransformWithCovariance_m_ACN_Decode(asn1SccBase_TransformWithCovariance_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_VectorXd --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_VectorXd_data;

typedef struct {
    asn1SccWrappers_VectorXd_data data;

} asn1SccWrappers_VectorXd;

void asn1SccWrappers_VectorXd_data_Initialize(asn1SccWrappers_VectorXd_data* pVal);
void asn1SccWrappers_VectorXd_Initialize(asn1SccWrappers_VectorXd* pVal);

#define ERR_WRAPPERS_VECTORXD_DATA_ELM		5808  /**/
#define ERR_WRAPPERS_VECTORXD_DATA		5819  /**/
flag asn1SccWrappers_VectorXd_IsConstraintValid(const asn1SccWrappers_VectorXd* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD		5826  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA		5820  /**/
#define ERR_UPER_ENCODE_WRAPPERS_VECTORXD_DATA_ELM_2		5815  /**/
#define asn1SccWrappers_VectorXd_REQUIRED_BYTES_FOR_ENCODING       2601 
#define asn1SccWrappers_VectorXd_REQUIRED_BITS_FOR_ENCODING        20808

flag asn1SccWrappers_VectorXd_Encode(const asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_VECTORXD		5827  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA		5821  /**/
#define ERR_UPER_DECODE_WRAPPERS_VECTORXD_DATA_ELM_2		5816  /**/
flag asn1SccWrappers_VectorXd_Decode(asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_VECTORXD		5828  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTORXD_DATA		5822  /**/
#define ERR_ACN_ENCODE_WRAPPERS_VECTORXD_DATA_ELM		5811  /**/
#define asn1SccWrappers_VectorXd_REQUIRED_BYTES_FOR_ACN_ENCODING       2601 
#define asn1SccWrappers_VectorXd_REQUIRED_BITS_FOR_ACN_ENCODING        20808

flag asn1SccWrappers_VectorXd_ACN_Encode(const asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_VECTORXD		5829  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTORXD_DATA		5823  /**/
#define ERR_ACN_DECODE_WRAPPERS_VECTORXD_DATA_ELM		5812  /**/
flag asn1SccWrappers_VectorXd_ACN_Decode(asn1SccWrappers_VectorXd* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccWrappers_geometry_Spline --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_geometry_Spline_knots;


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccWrappers_geometry_Spline_vertices;

typedef struct {
    asn1SccT_Double geometric_resolution;
    asn1SccT_Int32 dimension;
    asn1SccT_Int32 curve_order;
    asn1SccWrappers_geometry_SplineType kind;
    asn1SccWrappers_geometry_Spline_knots knots;
    asn1SccWrappers_geometry_Spline_vertices vertices;

} asn1SccWrappers_geometry_Spline;

void asn1SccWrappers_geometry_Spline_knots_Initialize(asn1SccWrappers_geometry_Spline_knots* pVal);
void asn1SccWrappers_geometry_Spline_vertices_Initialize(asn1SccWrappers_geometry_Spline_vertices* pVal);
void asn1SccWrappers_geometry_Spline_Initialize(asn1SccWrappers_geometry_Spline* pVal);

#define ERR_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION		7762  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_DIMENSION		7773  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER		7784  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KIND		7795  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM		7806  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7817  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM		7824  /**/
#define ERR_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7835  /**/
flag asn1SccWrappers_geometry_Spline_IsConstraintValid(const asn1SccWrappers_geometry_Spline* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE		7842  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		7769  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		7780  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		7791  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		7802  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7818  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		7813  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7836  /**/
#define ERR_UPER_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		7831  /**/
#define asn1SccWrappers_geometry_Spline_REQUIRED_BYTES_FOR_ENCODING       5224 
#define asn1SccWrappers_geometry_Spline_REQUIRED_BITS_FOR_ENCODING        41787

flag asn1SccWrappers_geometry_Spline_Encode(const asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE		7843  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION_2		7770  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION_2		7781  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER_2		7792  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KIND_2		7803  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7819  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM_2		7814  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7837  /**/
#define ERR_UPER_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM_2		7832  /**/
flag asn1SccWrappers_geometry_Spline_Decode(asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE		7844  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION		7765  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION		7776  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER		7787  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KIND		7798  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7820  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM		7809  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7838  /**/
#define ERR_ACN_ENCODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM		7827  /**/
#define asn1SccWrappers_geometry_Spline_REQUIRED_BYTES_FOR_ACN_ENCODING       5224 
#define asn1SccWrappers_geometry_Spline_REQUIRED_BITS_FOR_ACN_ENCODING        41787

flag asn1SccWrappers_geometry_Spline_ACN_Encode(const asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE		7845  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_GEOMETRIC_RESOLUTION		7766  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_DIMENSION		7777  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_CURVE_ORDER		7788  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_KIND		7799  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS		7821  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_KNOTS_ELM		7810  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES		7839  /**/
#define ERR_ACN_DECODE_WRAPPERS_GEOMETRY_SPLINE_VERTICES_ELM		7828  /**/
flag asn1SccWrappers_geometry_Spline_ACN_Decode(asn1SccWrappers_geometry_Spline* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Trajectory --------------------------------------------*/

typedef struct {
    asn1SccT_Double speed;
    asn1SccWrappers_geometry_Spline spline;

} asn1SccBase_Trajectory;

void asn1SccBase_Trajectory_Initialize(asn1SccBase_Trajectory* pVal);

#define ERR_BASE_TRAJECTORY_SPEED		1057  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_GEOMETRIC_RESOLUTION		1068  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_DIMENSION		1079  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_CURVE_ORDER		1090  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KIND		1101  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS_ELM		1112  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_KNOTS		1123  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES_ELM		1130  /**/
#define ERR_BASE_TRAJECTORY_SPLINE_VERTICES		1141  /**/
flag asn1SccBase_Trajectory_IsConstraintValid(const asn1SccBase_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY		1158  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPEED_2		1064  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_SPLINE_2		1154  /**/
#define asn1SccBase_Trajectory_REQUIRED_BYTES_FOR_ENCODING       5237 
#define asn1SccBase_Trajectory_REQUIRED_BITS_FOR_ENCODING        41891

flag asn1SccBase_Trajectory_Encode(const asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY		1159  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPEED_2		1065  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_SPLINE_2		1155  /**/
flag asn1SccBase_Trajectory_Decode(asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TRAJECTORY		1160  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPEED		1060  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE		1150  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_GEOMETRIC_RESOLUTION		1071  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_DIMENSION		1082  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_CURVE_ORDER		1093  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_KIND		1104  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_KNOTS		1126  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_KNOTS_ELM		1115  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_VERTICES		1144  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_SPLINE_VERTICES_ELM		1133  /**/
#define asn1SccBase_Trajectory_REQUIRED_BYTES_FOR_ACN_ENCODING       5237 
#define asn1SccBase_Trajectory_REQUIRED_BITS_FOR_ACN_ENCODING        41891

flag asn1SccBase_Trajectory_ACN_Encode(const asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TRAJECTORY		1161  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPEED		1061  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE		1151  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_GEOMETRIC_RESOLUTION		1072  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_DIMENSION		1083  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_CURVE_ORDER		1094  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_KIND		1105  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_KNOTS		1127  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_KNOTS_ELM		1116  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_VERTICES		1145  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_SPLINE_VERTICES_ELM		1134  /**/
flag asn1SccBase_Trajectory_ACN_Decode(asn1SccBase_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Trajectory_m --------------------------------------------*/

typedef struct {
    asn1SccT_Double speed;
    asn1SccWrappers_geometry_Spline spline;

} asn1SccBase_Trajectory_m;

void asn1SccBase_Trajectory_m_Initialize(asn1SccBase_Trajectory_m* pVal);

#define ERR_BASE_TRAJECTORY_M_SPEED		7848  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_GEOMETRIC_RESOLUTION		7859  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_DIMENSION		7870  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_CURVE_ORDER		7881  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KIND		7892  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS_ELM		7903  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_KNOTS		7914  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES_ELM		7921  /**/
#define ERR_BASE_TRAJECTORY_M_SPLINE_VERTICES		7932  /**/
flag asn1SccBase_Trajectory_m_IsConstraintValid(const asn1SccBase_Trajectory_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M		7949  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPEED_2		7855  /**/
#define ERR_UPER_ENCODE_BASE_TRAJECTORY_M_SPLINE_2		7945  /**/
#define asn1SccBase_Trajectory_m_REQUIRED_BYTES_FOR_ENCODING       5237 
#define asn1SccBase_Trajectory_m_REQUIRED_BITS_FOR_ENCODING        41891

flag asn1SccBase_Trajectory_m_Encode(const asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TRAJECTORY_M		7950  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPEED_2		7856  /**/
#define ERR_UPER_DECODE_BASE_TRAJECTORY_M_SPLINE_2		7946  /**/
flag asn1SccBase_Trajectory_m_Decode(asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M		7951  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPEED		7851  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE		7941  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_GEOMETRIC_RESOLUTION		7862  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_DIMENSION		7873  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_CURVE_ORDER		7884  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_KIND		7895  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_KNOTS		7917  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_KNOTS_ELM		7906  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_VERTICES		7935  /**/
#define ERR_ACN_ENCODE_BASE_TRAJECTORY_M_SPLINE_VERTICES_ELM		7924  /**/
#define asn1SccBase_Trajectory_m_REQUIRED_BYTES_FOR_ACN_ENCODING       5237 
#define asn1SccBase_Trajectory_m_REQUIRED_BITS_FOR_ACN_ENCODING        41891

flag asn1SccBase_Trajectory_m_ACN_Encode(const asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TRAJECTORY_M		7952  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPEED		7852  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE		7942  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_GEOMETRIC_RESOLUTION		7863  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_DIMENSION		7874  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_CURVE_ORDER		7885  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_KIND		7896  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_KNOTS		7918  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_KNOTS_ELM		7907  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_VERTICES		7936  /**/
#define ERR_ACN_DECODE_BASE_TRAJECTORY_M_SPLINE_VERTICES_ELM		7925  /**/
flag asn1SccBase_Trajectory_m_ACN_Decode(asn1SccBase_Trajectory_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccBase_Trajectory_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory;

void asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPEED		411  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_GEOMETRIC_RESOLUTION		422  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_DIMENSION		433  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_CURVE_ORDER		444  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KIND		455  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS_ELM		466  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS		477  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES_ELM		484  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES		495  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		522  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		523  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		518  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BYTES_FOR_ENCODING       1047276 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BITS_FOR_ENCODING        8378208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		524  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_2		519  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		525  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM		514  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPEED		414  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE		504  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_GEOMETRIC_RESOLUTION		425  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_DIMENSION		436  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_CURVE_ORDER		447  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KIND		458  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS		480  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS_ELM		469  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES		498  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES_ELM		487  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BYTES_FOR_ACN_ENCODING       1047276 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_REQUIRED_BITS_FOR_ACN_ENCODING        8378208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_ACN_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY		526  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM		515  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPEED		415  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE		505  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_GEOMETRIC_RESOLUTION		426  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_DIMENSION		437  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_CURVE_ORDER		448  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KIND		459  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS		481  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_KNOTS_ELM		470  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES		499  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_TRAJECTORY_ELM_SPLINE_VERTICES_ELM		488  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory_ACN_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_Trajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccGeometry_msgs_Point --------------------------------------------*/

typedef struct {
    asn1SccT_Double x;
    asn1SccT_Double y;
    asn1SccT_Double z;

} asn1SccGeometry_msgs_Point;

void asn1SccGeometry_msgs_Point_Initialize(asn1SccGeometry_msgs_Point* pVal);

#define ERR_GEOMETRY_MSGS_POINT_X		7955  /**/
#define ERR_GEOMETRY_MSGS_POINT_Y		7966  /**/
#define ERR_GEOMETRY_MSGS_POINT_Z		7977  /**/
flag asn1SccGeometry_msgs_Point_IsConstraintValid(const asn1SccGeometry_msgs_Point* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT		7988  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_X_2		7962  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_Y_2		7973  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT_Z_2		7984  /**/
#define asn1SccGeometry_msgs_Point_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Point_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Point_Encode(const asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT		7989  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_X_2		7963  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_Y_2		7974  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT_Z_2		7985  /**/
flag asn1SccGeometry_msgs_Point_Decode(asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT		7990  /**/
#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT_X		7958  /**/
#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT_Y		7969  /**/
#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT_Z		7980  /**/
#define asn1SccGeometry_msgs_Point_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define asn1SccGeometry_msgs_Point_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag asn1SccGeometry_msgs_Point_ACN_Encode(const asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT		7991  /**/
#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT_X		7959  /**/
#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT_Y		7970  /**/
#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT_Z		7981  /**/
flag asn1SccGeometry_msgs_Point_ACN_Decode(asn1SccGeometry_msgs_Point* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccT_Float;


void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		8086  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		8087  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		8088  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_FLOAT		8089  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccT_Float_ACN_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_FLOAT		8090  /**/
flag asn1SccT_Float_ACN_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointState --------------------------------------------*/

typedef struct {
    asn1SccT_Double position;
    asn1SccT_Float speed;
    asn1SccT_Float effort;
    asn1SccT_Float raw;
    asn1SccT_Float acceleration;

} asn1SccBase_JointState;

void asn1SccBase_JointState_Initialize(asn1SccBase_JointState* pVal);

#define ERR_BASE_JOINTSTATE_POSITION		872  /**/
#define ERR_BASE_JOINTSTATE_SPEED		883  /**/
#define ERR_BASE_JOINTSTATE_EFFORT		894  /**/
#define ERR_BASE_JOINTSTATE_RAW		905  /**/
#define ERR_BASE_JOINTSTATE_ACCELERATION		916  /**/
flag asn1SccBase_JointState_IsConstraintValid(const asn1SccBase_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTATE		927  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_POSITION_2		879  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_SPEED_2		890  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_EFFORT_2		901  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_RAW_2		912  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTATE_ACCELERATION_2		923  /**/
#define asn1SccBase_JointState_REQUIRED_BYTES_FOR_ENCODING       65 
#define asn1SccBase_JointState_REQUIRED_BITS_FOR_ENCODING        520

flag asn1SccBase_JointState_Encode(const asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTATE		928  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_POSITION_2		880  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_SPEED_2		891  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_EFFORT_2		902  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_RAW_2		913  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTATE_ACCELERATION_2		924  /**/
flag asn1SccBase_JointState_Decode(asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTSTATE		929  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTATE_POSITION		875  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTATE_SPEED		886  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTATE_EFFORT		897  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTATE_RAW		908  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTATE_ACCELERATION		919  /**/
#define asn1SccBase_JointState_REQUIRED_BYTES_FOR_ACN_ENCODING       65 
#define asn1SccBase_JointState_REQUIRED_BITS_FOR_ACN_ENCODING        520

flag asn1SccBase_JointState_ACN_Encode(const asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTSTATE		930  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTATE_POSITION		876  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTATE_SPEED		887  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTATE_EFFORT		898  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTATE_RAW		909  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTATE_ACCELERATION		920  /**/
flag asn1SccBase_JointState_ACN_Decode(asn1SccBase_JointState* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccBase_JointState arr[200];
} asn1SccBase_JointTrajectory;

void asn1SccBase_JointTrajectory_Initialize(asn1SccBase_JointTrajectory* pVal);

#define ERR_BASE_JOINTTRAJECTORY_ELM_POSITION		86  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_SPEED		97  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_EFFORT		108  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_RAW		119  /**/
#define ERR_BASE_JOINTTRAJECTORY_ELM_ACCELERATION		130  /**/
#define ERR_BASE_JOINTTRAJECTORY		151  /**/
flag asn1SccBase_JointTrajectory_IsConstraintValid(const asn1SccBase_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY		152  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRAJECTORY_ELM_2		147  /**/
#define asn1SccBase_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       13001 
#define asn1SccBase_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        104008

flag asn1SccBase_JointTrajectory_Encode(const asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY		153  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRAJECTORY_ELM_2		148  /**/
flag asn1SccBase_JointTrajectory_Decode(asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY		154  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY_ELM		143  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY_ELM_POSITION		89  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY_ELM_SPEED		100  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY_ELM_EFFORT		111  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY_ELM_RAW		122  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRAJECTORY_ELM_ACCELERATION		133  /**/
#define asn1SccBase_JointTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING       13001 
#define asn1SccBase_JointTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING        104008

flag asn1SccBase_JointTrajectory_ACN_Encode(const asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY		155  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY_ELM		144  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY_ELM_POSITION		90  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY_ELM_SPEED		101  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY_ELM_EFFORT		112  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY_ELM_RAW		123  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRAJECTORY_ELM_ACCELERATION		134  /**/
flag asn1SccBase_JointTrajectory_ACN_Decode(asn1SccBase_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointLimitRange --------------------------------------------*/

typedef struct {
    asn1SccBase_JointState min;
    asn1SccBase_JointState max;

} asn1SccBase_JointLimitRange;

void asn1SccBase_JointLimitRange_Initialize(asn1SccBase_JointLimitRange* pVal);

#define ERR_BASE_JOINTLIMITRANGE_MIN_POSITION		1231  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_SPEED		1242  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_EFFORT		1253  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_RAW		1264  /**/
#define ERR_BASE_JOINTLIMITRANGE_MIN_ACCELERATION		1275  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_POSITION		1296  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_SPEED		1307  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_EFFORT		1318  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_RAW		1329  /**/
#define ERR_BASE_JOINTLIMITRANGE_MAX_ACCELERATION		1340  /**/
flag asn1SccBase_JointLimitRange_IsConstraintValid(const asn1SccBase_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE		1361  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MIN_2		1292  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITRANGE_MAX_2		1357  /**/
#define asn1SccBase_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       130 
#define asn1SccBase_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        1040

flag asn1SccBase_JointLimitRange_Encode(const asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE		1362  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MIN_2		1293  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITRANGE_MAX_2		1358  /**/
flag asn1SccBase_JointLimitRange_Decode(asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE		1363  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MIN		1288  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MIN_POSITION		1234  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MIN_SPEED		1245  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MIN_EFFORT		1256  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MIN_RAW		1267  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MIN_ACCELERATION		1278  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MAX		1353  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MAX_POSITION		1299  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MAX_SPEED		1310  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MAX_EFFORT		1321  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MAX_RAW		1332  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITRANGE_MAX_ACCELERATION		1343  /**/
#define asn1SccBase_JointLimitRange_REQUIRED_BYTES_FOR_ACN_ENCODING       130 
#define asn1SccBase_JointLimitRange_REQUIRED_BITS_FOR_ACN_ENCODING        1040

flag asn1SccBase_JointLimitRange_ACN_Encode(const asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE		1364  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MIN		1289  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MIN_POSITION		1235  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MIN_SPEED		1246  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MIN_EFFORT		1257  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MIN_RAW		1268  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MIN_ACCELERATION		1279  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MAX		1354  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MAX_POSITION		1300  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MAX_SPEED		1311  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MAX_EFFORT		1322  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MAX_RAW		1333  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITRANGE_MAX_ACCELERATION		1344  /**/
flag asn1SccBase_JointLimitRange_ACN_Decode(asn1SccBase_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Pressure --------------------------------------------*/

typedef struct {
    asn1SccT_Float pascal;

} asn1SccBase_Pressure;

void asn1SccBase_Pressure_Initialize(asn1SccBase_Pressure* pVal);

#define ERR_BASE_PRESSURE_PASCAL		1006  /**/
flag asn1SccBase_Pressure_IsConstraintValid(const asn1SccBase_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_PRESSURE		1017  /**/
#define ERR_UPER_ENCODE_BASE_PRESSURE_PASCAL_2		1013  /**/
#define asn1SccBase_Pressure_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccBase_Pressure_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccBase_Pressure_Encode(const asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_PRESSURE		1018  /**/
#define ERR_UPER_DECODE_BASE_PRESSURE_PASCAL_2		1014  /**/
flag asn1SccBase_Pressure_Decode(asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_PRESSURE		1019  /**/
#define ERR_ACN_ENCODE_BASE_PRESSURE_PASCAL		1009  /**/
#define asn1SccBase_Pressure_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccBase_Pressure_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccBase_Pressure_ACN_Encode(const asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_PRESSURE		1020  /**/
#define ERR_ACN_DECODE_BASE_PRESSURE_PASCAL		1010  /**/
flag asn1SccBase_Pressure_ACN_Decode(asn1SccBase_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccGeometry_msgs_Point32 --------------------------------------------*/

typedef struct {
    asn1SccT_Float x;
    asn1SccT_Float y;
    asn1SccT_Float z;

} asn1SccGeometry_msgs_Point32;

void asn1SccGeometry_msgs_Point32_Initialize(asn1SccGeometry_msgs_Point32* pVal);

#define ERR_GEOMETRY_MSGS_POINT32_X		7994  /**/
#define ERR_GEOMETRY_MSGS_POINT32_Y		8005  /**/
#define ERR_GEOMETRY_MSGS_POINT32_Z		8016  /**/
flag asn1SccGeometry_msgs_Point32_IsConstraintValid(const asn1SccGeometry_msgs_Point32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32		8027  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_X_2		8001  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_Y_2		8012  /**/
#define ERR_UPER_ENCODE_GEOMETRY_MSGS_POINT32_Z_2		8023  /**/
#define asn1SccGeometry_msgs_Point32_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccGeometry_msgs_Point32_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccGeometry_msgs_Point32_Encode(const asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32		8028  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_X_2		8002  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_Y_2		8013  /**/
#define ERR_UPER_DECODE_GEOMETRY_MSGS_POINT32_Z_2		8024  /**/
flag asn1SccGeometry_msgs_Point32_Decode(asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT32		8029  /**/
#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT32_X		7997  /**/
#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT32_Y		8008  /**/
#define ERR_ACN_ENCODE_GEOMETRY_MSGS_POINT32_Z		8019  /**/
#define asn1SccGeometry_msgs_Point32_REQUIRED_BYTES_FOR_ACN_ENCODING       39 
#define asn1SccGeometry_msgs_Point32_REQUIRED_BITS_FOR_ACN_ENCODING        312

flag asn1SccGeometry_msgs_Point32_ACN_Encode(const asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT32		8030  /**/
#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT32_X		7998  /**/
#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT32_Y		8009  /**/
#define ERR_ACN_DECODE_GEOMETRY_MSGS_POINT32_Z		8020  /**/
flag asn1SccGeometry_msgs_Point32_ACN_Decode(asn1SccGeometry_msgs_Point32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int16;


void asn1SccT_Int16_Initialize(asn1SccT_Int16* pVal);

#define ERR_T_INT16		8093  /**/
flag asn1SccT_Int16_IsConstraintValid(const asn1SccT_Int16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT16		8094  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_Int16_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT16		8095  /**/
flag asn1SccT_Int16_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT16		8096  /**/
#define asn1SccT_Int16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccT_Int16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccT_Int16_ACN_Encode(const asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT16		8097  /**/
flag asn1SccT_Int16_ACN_Decode(asn1SccT_Int16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt16;


void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		8100  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		8101  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		8102  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT16		8103  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccT_UInt16_ACN_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT16		8104  /**/
flag asn1SccT_UInt16_ACN_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_frame_frame_size_t --------------------------------------------*/

typedef struct {
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;

} asn1SccBase_samples_frame_frame_size_t;

void asn1SccBase_samples_frame_frame_size_t_Initialize(asn1SccBase_samples_frame_frame_size_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH		2308  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT		2319  /**/
flag asn1SccBase_samples_frame_frame_size_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_size_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2330  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2315  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2326  /**/
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccBase_samples_frame_frame_size_t_Encode(const asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2331  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH_2		2316  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT_2		2327  /**/
flag asn1SccBase_samples_frame_frame_size_t_Decode(asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2332  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH		2311  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT		2322  /**/
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccBase_samples_frame_frame_size_t_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccBase_samples_frame_frame_size_t_ACN_Encode(const asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T		2333  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_WIDTH		2312  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_T_HEIGHT		2323  /**/
flag asn1SccBase_samples_frame_frame_size_t_ACN_Decode(asn1SccBase_samples_frame_frame_size_t* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		8107  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		8108  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		8109  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT64		8110  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccT_UInt64_ACN_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT64		8111  /**/
flag asn1SccT_UInt64_ACN_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int64;


void asn1SccT_Int64_Initialize(asn1SccT_Int64* pVal);

#define ERR_T_INT64		8114  /**/
flag asn1SccT_Int64_IsConstraintValid(const asn1SccT_Int64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT64		8115  /**/
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccT_Int64_Encode(const asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT64		8116  /**/
flag asn1SccT_Int64_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT64		8117  /**/
#define asn1SccT_Int64_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccT_Int64_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccT_Int64_ACN_Encode(const asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT64		8118  /**/
flag asn1SccT_Int64_ACN_Decode(asn1SccT_Int64* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_Time --------------------------------------------*/

typedef struct {
    asn1SccT_Int64 microseconds;

} asn1SccBase_Time;

void asn1SccBase_Time_Initialize(asn1SccBase_Time* pVal);

#define ERR_BASE_TIME_MICROSECONDS		1040  /**/
flag asn1SccBase_Time_IsConstraintValid(const asn1SccBase_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIME		1051  /**/
#define ERR_UPER_ENCODE_BASE_TIME_MICROSECONDS_2		1047  /**/
#define asn1SccBase_Time_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccBase_Time_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccBase_Time_Encode(const asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIME		1052  /**/
#define ERR_UPER_DECODE_BASE_TIME_MICROSECONDS_2		1048  /**/
flag asn1SccBase_Time_Decode(asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TIME		1053  /**/
#define ERR_ACN_ENCODE_BASE_TIME_MICROSECONDS		1043  /**/
#define asn1SccBase_Time_REQUIRED_BYTES_FOR_ACN_ENCODING       8 
#define asn1SccBase_Time_REQUIRED_BITS_FOR_ACN_ENCODING        64

flag asn1SccBase_Time_ACN_Encode(const asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TIME		1054  /**/
#define ERR_ACN_DECODE_BASE_TIME_MICROSECONDS		1044  /**/
flag asn1SccBase_Time_ACN_Decode(asn1SccBase_Time* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_TimeStamped_Base_commands_Motion2D --------------------------------------------*/

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
    asn1SccBase_Time time;

} asn1SccBase_TimeStamped_Base_commands_Motion2D;

void asn1SccBase_TimeStamped_Base_commands_Motion2D_Initialize(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal);

#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION		1367  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION		1378  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_RAD		1389  /**/
#define ERR_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_MICROSECONDS		1410  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_IsConstraintValid(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1431  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1374  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1385  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1406  /**/
#define ERR_UPER_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1427  /**/
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Encode(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1432  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION_2		1375  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION_2		1386  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_2		1407  /**/
#define ERR_UPER_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_2		1428  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_Decode(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1433  /**/
#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION		1370  /**/
#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION		1381  /**/
#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING		1402  /**/
#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_RAD		1392  /**/
#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME		1423  /**/
#define ERR_ACN_ENCODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_MICROSECONDS		1413  /**/
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BYTES_FOR_ACN_ENCODING       47 
#define asn1SccBase_TimeStamped_Base_commands_Motion2D_REQUIRED_BITS_FOR_ACN_ENCODING        376

flag asn1SccBase_TimeStamped_Base_commands_Motion2D_ACN_Encode(const asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D		1434  /**/
#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TRANSLATION		1371  /**/
#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_ROTATION		1382  /**/
#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING		1403  /**/
#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_HEADING_RAD		1393  /**/
#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME		1424  /**/
#define ERR_ACN_DECODE_BASE_TIMESTAMPED_BASE_COMMANDS_MOTION2D_TIME_MICROSECONDS		1414  /**/
flag asn1SccBase_TimeStamped_Base_commands_Motion2D_ACN_Decode(asn1SccBase_TimeStamped_Base_commands_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_LinearAngular6DCommand --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d linear;
    asn1SccWrappers_Vector3d angular;

} asn1SccBase_LinearAngular6DCommand;

void asn1SccBase_LinearAngular6DCommand_Initialize(asn1SccBase_LinearAngular6DCommand* pVal);

#define ERR_BASE_LINEARANGULAR6DCOMMAND_TIME_MICROSECONDS		1437  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA_ELM		1458  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA		1469  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA_ELM		1486  /**/
#define ERR_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA		1497  /**/
flag asn1SccBase_LinearAngular6DCommand_IsConstraintValid(const asn1SccBase_LinearAngular6DCommand* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND		1514  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1454  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1482  /**/
#define ERR_UPER_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1510  /**/
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_LinearAngular6DCommand_Encode(const asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND		1515  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_TIME_2		1455  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_2		1483  /**/
#define ERR_UPER_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_2		1511  /**/
flag asn1SccBase_LinearAngular6DCommand_Decode(asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND		1516  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_TIME		1450  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_TIME_MICROSECONDS		1440  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR		1478  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA		1472  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA_ELM		1461  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR		1506  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA		1500  /**/
#define ERR_ACN_ENCODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA_ELM		1489  /**/
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define asn1SccBase_LinearAngular6DCommand_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag asn1SccBase_LinearAngular6DCommand_ACN_Encode(const asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND		1517  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_TIME		1451  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_TIME_MICROSECONDS		1441  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR		1479  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA		1473  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_LINEAR_DATA_ELM		1462  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR		1507  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA		1501  /**/
#define ERR_ACN_DECODE_BASE_LINEARANGULAR6DCOMMAND_ANGULAR_DATA_ELM		1490  /**/
flag asn1SccBase_LinearAngular6DCommand_ACN_Decode(asn1SccBase_LinearAngular6DCommand* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_BodyState --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_TransformWithCovariance pose;
    asn1SccBase_TwistWithCovariance velocity;

} asn1SccBase_samples_BodyState;

void asn1SccBase_samples_BodyState_Initialize(asn1SccBase_samples_BodyState* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_TIME_MICROSECONDS		1641  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA_ELM		1662  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA		1673  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM_ELM		1690  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM		1701  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_RE		1708  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA_ELM		1729  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA		1740  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA_ELM		1767  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA		1778  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA_ELM		1795  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA		1806  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA_ELM		1823  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA		1834  /**/
flag asn1SccBase_samples_BodyState_IsConstraintValid(const asn1SccBase_samples_BodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE		1861  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_TIME_2		1658  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_2		1763  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1857  /**/
#define asn1SccBase_samples_BodyState_REQUIRED_BYTES_FOR_ENCODING       1116 
#define asn1SccBase_samples_BodyState_REQUIRED_BITS_FOR_ENCODING        8924

flag asn1SccBase_samples_BodyState_Encode(const asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE		1862  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_TIME_2		1659  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_POSE_2		1764  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_2		1858  /**/
flag asn1SccBase_samples_BodyState_Decode(asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE		1863  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_TIME		1654  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_TIME_MICROSECONDS		1644  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE		1759  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION		1682  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA		1676  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA_ELM		1665  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION		1721  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM		1704  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM_ELM		1693  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_RE		1711  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_COV		1749  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA		1743  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA_ELM		1732  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY		1853  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL		1787  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA		1781  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA_ELM		1770  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT		1815  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA		1809  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA_ELM		1798  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_COV		1843  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA		1837  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA_ELM		1826  /**/
#define asn1SccBase_samples_BodyState_REQUIRED_BYTES_FOR_ACN_ENCODING       1116 
#define asn1SccBase_samples_BodyState_REQUIRED_BITS_FOR_ACN_ENCODING        8924

flag asn1SccBase_samples_BodyState_ACN_Encode(const asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE		1864  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_TIME		1655  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_TIME_MICROSECONDS		1645  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE		1760  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION		1683  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA		1677  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_TRANSLATION_DATA_ELM		1666  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION		1722  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM		1705  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_IM_ELM		1694  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_ORIENTATION_RE		1712  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_COV		1750  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA		1744  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_POSE_COV_DATA_ELM		1733  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY		1854  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL		1788  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA		1782  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_VEL_DATA_ELM		1771  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT		1816  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA		1810  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_ROT_DATA_ELM		1799  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_COV		1844  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA		1838  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_VELOCITY_COV_DATA_ELM		1827  /**/
flag asn1SccBase_samples_BodyState_ACN_Decode(asn1SccBase_samples_BodyState* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_IMUSensors --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acc;
    asn1SccWrappers_Vector3d gyro;
    asn1SccWrappers_Vector3d mag;

} asn1SccBase_samples_IMUSensors;

void asn1SccBase_samples_IMUSensors_Initialize(asn1SccBase_samples_IMUSensors* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_TIME_MICROSECONDS		1867  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA_ELM		1888  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_ACC_DATA		1899  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA_ELM		1916  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_GYRO_DATA		1927  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA_ELM		1944  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_MAG_DATA		1955  /**/
flag asn1SccBase_samples_IMUSensors_IsConstraintValid(const asn1SccBase_samples_IMUSensors* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS		1972  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1884  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1912  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		1940  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG_2		1968  /**/
#define asn1SccBase_samples_IMUSensors_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_Encode(const asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS		1973  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_TIME_2		1885  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_ACC_2		1913  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO_2		1941  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_MAG_2		1969  /**/
flag asn1SccBase_samples_IMUSensors_Decode(asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS		1974  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_TIME		1880  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_TIME_MICROSECONDS		1870  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC		1908  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC_DATA		1902  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_ACC_DATA_ELM		1891  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO		1936  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO_DATA		1930  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_GYRO_DATA_ELM		1919  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG		1964  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG_DATA		1958  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_MAG_DATA_ELM		1947  /**/
#define asn1SccBase_samples_IMUSensors_REQUIRED_BYTES_FOR_ACN_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_REQUIRED_BITS_FOR_ACN_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_ACN_Encode(const asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS		1975  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_TIME		1881  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_TIME_MICROSECONDS		1871  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_ACC		1909  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_ACC_DATA		1903  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_ACC_DATA_ELM		1892  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO		1937  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO_DATA		1931  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_GYRO_DATA_ELM		1920  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_MAG		1965  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_MAG_DATA		1959  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_MAG_DATA_ELM		1948  /**/
flag asn1SccBase_samples_IMUSensors_ACN_Decode(asn1SccBase_samples_IMUSensors* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Motion2D --------------------------------------------*/

typedef struct {
    asn1SccT_Double translation;
    asn1SccT_Double rotation;
    asn1SccBase_Angle heading;
    asn1SccBase_Time time;

} asn1SccBase_samples_Motion2D;

void asn1SccBase_samples_Motion2D_Initialize(asn1SccBase_samples_Motion2D* pVal);

#define ERR_BASE_SAMPLES_MOTION2D_TRANSLATION		1978  /**/
#define ERR_BASE_SAMPLES_MOTION2D_ROTATION		1989  /**/
#define ERR_BASE_SAMPLES_MOTION2D_HEADING_RAD		2000  /**/
#define ERR_BASE_SAMPLES_MOTION2D_TIME_MICROSECONDS		2021  /**/
flag asn1SccBase_samples_Motion2D_IsConstraintValid(const asn1SccBase_samples_Motion2D* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D		2042  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		1985  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_ROTATION_2		1996  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_HEADING_2		2017  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_MOTION2D_TIME_2		2038  /**/
#define asn1SccBase_samples_Motion2D_REQUIRED_BYTES_FOR_ENCODING       47 
#define asn1SccBase_samples_Motion2D_REQUIRED_BITS_FOR_ENCODING        376

flag asn1SccBase_samples_Motion2D_Encode(const asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D		2043  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TRANSLATION_2		1986  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_ROTATION_2		1997  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_HEADING_2		2018  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_MOTION2D_TIME_2		2039  /**/
flag asn1SccBase_samples_Motion2D_Decode(asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D		2044  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D_TRANSLATION		1981  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D_ROTATION		1992  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D_HEADING		2013  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D_HEADING_RAD		2003  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D_TIME		2034  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_MOTION2D_TIME_MICROSECONDS		2024  /**/
#define asn1SccBase_samples_Motion2D_REQUIRED_BYTES_FOR_ACN_ENCODING       47 
#define asn1SccBase_samples_Motion2D_REQUIRED_BITS_FOR_ACN_ENCODING        376

flag asn1SccBase_samples_Motion2D_ACN_Encode(const asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D		2045  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D_TRANSLATION		1982  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D_ROTATION		1993  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D_HEADING		2014  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D_HEADING_RAD		2004  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D_TIME		2035  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_MOTION2D_TIME_MICROSECONDS		2025  /**/
flag asn1SccBase_samples_Motion2D_ACN_Decode(asn1SccBase_samples_Motion2D* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Pressure --------------------------------------------*/

typedef struct {
    asn1SccT_Float pascal;
    asn1SccBase_Time time;

} asn1SccBase_samples_Pressure;

void asn1SccBase_samples_Pressure_Initialize(asn1SccBase_samples_Pressure* pVal);

#define ERR_BASE_SAMPLES_PRESSURE_PASCAL		2048  /**/
#define ERR_BASE_SAMPLES_PRESSURE_TIME_MICROSECONDS		2059  /**/
flag asn1SccBase_samples_Pressure_IsConstraintValid(const asn1SccBase_samples_Pressure* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE		2080  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2055  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_PRESSURE_TIME_2		2076  /**/
#define asn1SccBase_samples_Pressure_REQUIRED_BYTES_FOR_ENCODING       21 
#define asn1SccBase_samples_Pressure_REQUIRED_BITS_FOR_ENCODING        168

flag asn1SccBase_samples_Pressure_Encode(const asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE		2081  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_PASCAL_2		2056  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_PRESSURE_TIME_2		2077  /**/
flag asn1SccBase_samples_Pressure_Decode(asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_PRESSURE		2082  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_PRESSURE_PASCAL		2051  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_PRESSURE_TIME		2072  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_PRESSURE_TIME_MICROSECONDS		2062  /**/
#define asn1SccBase_samples_Pressure_REQUIRED_BYTES_FOR_ACN_ENCODING       21 
#define asn1SccBase_samples_Pressure_REQUIRED_BITS_FOR_ACN_ENCODING        168

flag asn1SccBase_samples_Pressure_ACN_Encode(const asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_PRESSURE		2083  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_PRESSURE_PASCAL		2052  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_PRESSURE_TIME		2073  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_PRESSURE_TIME_MICROSECONDS		2063  /**/
flag asn1SccBase_samples_Pressure_ACN_Decode(asn1SccBase_samples_Pressure* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_RigidBodyAcceleration --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acceleration;
    asn1SccWrappers_Matrix3d cov_acceleration;
    asn1SccWrappers_Vector3d angular_acceleration;
    asn1SccWrappers_Matrix3d cov_angular_acceleration;

} asn1SccBase_samples_RigidBodyAcceleration;

void asn1SccBase_samples_RigidBodyAcceleration_Initialize(asn1SccBase_samples_RigidBodyAcceleration* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_MICROSECONDS		2086  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA_ELM		2107  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA		2118  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA_ELM		2135  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA		2146  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA_ELM		2163  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA		2174  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA_ELM		2191  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA		2202  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_IsConstraintValid(const asn1SccBase_samples_RigidBodyAcceleration* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2219  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2103  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2131  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2159  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2187  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2215  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BYTES_FOR_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BITS_FOR_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_Encode(const asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2220  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_2		2104  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_2		2132  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_2		2160  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_2		2188  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_2		2216  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_Decode(asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2221  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME		2099  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_MICROSECONDS		2089  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION		2127  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA		2121  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA_ELM		2110  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION		2155  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA		2149  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA_ELM		2138  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION		2183  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA		2177  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA_ELM		2166  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION		2211  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA		2205  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA_ELM		2194  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BYTES_FOR_ACN_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_REQUIRED_BITS_FOR_ACN_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_ACN_Encode(const asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION		2222  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME		2100  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_TIME_MICROSECONDS		2090  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION		2128  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA		2122  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ACCELERATION_DATA_ELM		2111  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION		2156  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA		2150  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ACCELERATION_DATA_ELM		2139  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION		2184  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA		2178  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_ANGULAR_ACCELERATION_DATA_ELM		2167  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION		2212  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA		2206  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_COV_ANGULAR_ACCELERATION_DATA_ELM		2195  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_ACN_Decode(asn1SccBase_samples_RigidBodyAcceleration* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Wrench --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
    asn1SccBase_Time time;

} asn1SccBase_samples_Wrench;

void asn1SccBase_samples_Wrench_Initialize(asn1SccBase_samples_Wrench* pVal);

#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA_ELM		2225  /**/
#define ERR_BASE_SAMPLES_WRENCH_FORCE_DATA		2236  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA_ELM		2253  /**/
#define ERR_BASE_SAMPLES_WRENCH_TORQUE_DATA		2264  /**/
#define ERR_BASE_SAMPLES_WRENCH_TIME_MICROSECONDS		2281  /**/
flag asn1SccBase_samples_Wrench_IsConstraintValid(const asn1SccBase_samples_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH		2302  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_FORCE_2		2249  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TORQUE_2		2277  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_TIME_2		2298  /**/
#define asn1SccBase_samples_Wrench_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_samples_Wrench_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_samples_Wrench_Encode(const asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH		2303  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_FORCE_2		2250  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TORQUE_2		2278  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_TIME_2		2299  /**/
flag asn1SccBase_samples_Wrench_Decode(asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH		2304  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_FORCE		2245  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_FORCE_DATA		2239  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_FORCE_DATA_ELM		2228  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_TORQUE		2273  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_TORQUE_DATA		2267  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_TORQUE_DATA_ELM		2256  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_TIME		2294  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_TIME_MICROSECONDS		2284  /**/
#define asn1SccBase_samples_Wrench_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define asn1SccBase_samples_Wrench_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag asn1SccBase_samples_Wrench_ACN_Encode(const asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH		2305  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_FORCE		2246  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_FORCE_DATA		2240  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_FORCE_DATA_ELM		2229  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_TORQUE		2274  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_TORQUE_DATA		2268  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_TORQUE_DATA_ELM		2257  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_TIME		2295  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_TIME_MICROSECONDS		2285  /**/
flag asn1SccBase_samples_Wrench_ACN_Decode(asn1SccBase_samples_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_DepthMap --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_DepthMap_timestamps;


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccBase_samples_DepthMap_vertical_interval;


typedef struct {
    int nCount; 
    
    asn1SccT_Double arr[200];
} asn1SccBase_samples_DepthMap_horizontal_interval;


typedef struct {
    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DepthMap_distances;


typedef struct {
    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DepthMap_remissions;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_DepthMap_timestamps timestamps;
    asn1SccBase_samples_DepthMap_PROJECTION_TYPE vertical_projection;
    asn1SccBase_samples_DepthMap_PROJECTION_TYPE horizontal_projection;
    asn1SccBase_samples_DepthMap_vertical_interval vertical_interval;
    asn1SccBase_samples_DepthMap_horizontal_interval horizontal_interval;
    asn1SccT_UInt32 vertical_size;
    asn1SccT_UInt32 horizontal_size;
    asn1SccBase_samples_DepthMap_distances distances;
    asn1SccBase_samples_DepthMap_remissions remissions;

} asn1SccBase_samples_DepthMap;

void asn1SccBase_samples_DepthMap_timestamps_Initialize(asn1SccBase_samples_DepthMap_timestamps* pVal);
void asn1SccBase_samples_DepthMap_vertical_interval_Initialize(asn1SccBase_samples_DepthMap_vertical_interval* pVal);
void asn1SccBase_samples_DepthMap_horizontal_interval_Initialize(asn1SccBase_samples_DepthMap_horizontal_interval* pVal);
void asn1SccBase_samples_DepthMap_distances_Initialize(asn1SccBase_samples_DepthMap_distances* pVal);
void asn1SccBase_samples_DepthMap_remissions_Initialize(asn1SccBase_samples_DepthMap_remissions* pVal);
void asn1SccBase_samples_DepthMap_Initialize(asn1SccBase_samples_DepthMap* pVal);

#define ERR_BASE_SAMPLES_DEPTHMAP_TIME_MICROSECONDS		3173  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_MICROSECONDS		3194  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3215  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION		3222  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION		3233  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM		3244  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3255  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM		3262  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3273  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE		3280  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE		3291  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM		3302  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_DISTANCES		3313  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM		3320  /**/
#define ERR_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3331  /**/
flag asn1SccBase_samples_DepthMap_IsConstraintValid(const asn1SccBase_samples_DepthMap* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP		3338  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3190  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3216  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3211  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3229  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3240  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3256  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3251  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3274  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3269  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3287  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3298  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3314  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3309  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3332  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3327  /**/
#define asn1SccBase_samples_DepthMap_REQUIRED_BYTES_FOR_ENCODING       12022 
#define asn1SccBase_samples_DepthMap_REQUIRED_BITS_FOR_ENCODING        96170

flag asn1SccBase_samples_DepthMap_Encode(const asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP		3339  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIME_2		3191  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3217  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_2		3212  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION_2		3230  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION_2		3241  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3257  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM_2		3252  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3275  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM_2		3270  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE_2		3288  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE_2		3299  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3315  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM_2		3310  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3333  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM_2		3328  /**/
flag asn1SccBase_samples_DepthMap_Decode(asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP		3340  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_TIME		3186  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_TIME_MICROSECONDS		3176  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3218  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM		3207  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_MICROSECONDS		3197  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION		3225  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION		3236  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3258  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM		3247  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3276  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM		3265  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE		3283  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE		3294  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3316  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM		3305  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3334  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM		3323  /**/
#define asn1SccBase_samples_DepthMap_REQUIRED_BYTES_FOR_ACN_ENCODING       12022 
#define asn1SccBase_samples_DepthMap_REQUIRED_BITS_FOR_ACN_ENCODING        96170

flag asn1SccBase_samples_DepthMap_ACN_Encode(const asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP		3341  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_TIME		3187  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_TIME_MICROSECONDS		3177  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS		3219  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM		3208  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_TIMESTAMPS_ELM_MICROSECONDS		3198  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_PROJECTION		3226  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_PROJECTION		3237  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL		3259  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_INTERVAL_ELM		3248  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL		3277  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_INTERVAL_ELM		3266  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_VERTICAL_SIZE		3284  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_HORIZONTAL_SIZE		3295  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES		3317  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_DISTANCES_ELM		3306  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS		3335  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DEPTHMAP_REMISSIONS_ELM		3324  /**/
flag asn1SccBase_samples_DepthMap_ACN_Decode(asn1SccBase_samples_DepthMap* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_DistanceImage --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_DistanceImage_data;

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_UInt16 width;
    asn1SccT_UInt16 height;
    asn1SccT_Float scale_x;
    asn1SccT_Float scale_y;
    asn1SccT_Float center_x;
    asn1SccT_Float center_y;
    asn1SccBase_samples_DistanceImage_data data;

} asn1SccBase_samples_DistanceImage;

void asn1SccBase_samples_DistanceImage_data_Initialize(asn1SccBase_samples_DistanceImage_data* pVal);
void asn1SccBase_samples_DistanceImage_Initialize(asn1SccBase_samples_DistanceImage* pVal);

#define ERR_BASE_SAMPLES_DISTANCEIMAGE_TIME_MICROSECONDS		3344  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_WIDTH		3365  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT		3376  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X		3387  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y		3398  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X		3409  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y		3420  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM		3431  /**/
#define ERR_BASE_SAMPLES_DISTANCEIMAGE_DATA		3442  /**/
flag asn1SccBase_samples_DistanceImage_IsConstraintValid(const asn1SccBase_samples_DistanceImage* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE		3449  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3361  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3372  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3383  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3394  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3405  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3416  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3427  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3443  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3438  /**/
#define asn1SccBase_samples_DistanceImage_REQUIRED_BYTES_FOR_ENCODING       2665 
#define asn1SccBase_samples_DistanceImage_REQUIRED_BITS_FOR_ENCODING        21320

flag asn1SccBase_samples_DistanceImage_Encode(const asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE		3450  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_2		3362  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH_2		3373  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT_2		3384  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X_2		3395  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y_2		3406  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X_2		3417  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y_2		3428  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3444  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM_2		3439  /**/
flag asn1SccBase_samples_DistanceImage_Decode(asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE		3451  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_TIME		3357  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_MICROSECONDS		3347  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH		3368  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT		3379  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X		3390  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y		3401  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X		3412  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y		3423  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3445  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM		3434  /**/
#define asn1SccBase_samples_DistanceImage_REQUIRED_BYTES_FOR_ACN_ENCODING       2665 
#define asn1SccBase_samples_DistanceImage_REQUIRED_BITS_FOR_ACN_ENCODING        21320

flag asn1SccBase_samples_DistanceImage_ACN_Encode(const asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE		3452  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_TIME		3358  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_TIME_MICROSECONDS		3348  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_WIDTH		3369  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_HEIGHT		3380  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_X		3391  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_SCALE_Y		3402  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_X		3413  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_CENTER_Y		3424  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA		3446  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_DISTANCEIMAGE_DATA_ELM		3435  /**/
flag asn1SccBase_samples_DistanceImage_ACN_Decode(asn1SccBase_samples_DistanceImage* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_LaserScan --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_UInt32 arr[200];
} asn1SccBase_samples_LaserScan_ranges;


typedef struct {
    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_LaserScan_remission;

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_Double start_angle;
    asn1SccT_Double angular_resolution;
    asn1SccT_Double speed;
    asn1SccBase_samples_LaserScan_ranges ranges;
    asn1SccT_UInt32 minrange;
    asn1SccT_UInt32 maxrange;
    asn1SccBase_samples_LaserScan_remission remission;

} asn1SccBase_samples_LaserScan;

void asn1SccBase_samples_LaserScan_ranges_Initialize(asn1SccBase_samples_LaserScan_ranges* pVal);
void asn1SccBase_samples_LaserScan_remission_Initialize(asn1SccBase_samples_LaserScan_remission* pVal);
void asn1SccBase_samples_LaserScan_Initialize(asn1SccBase_samples_LaserScan* pVal);

#define ERR_BASE_SAMPLES_LASERSCAN_TIME_MICROSECONDS		3576  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_START_ANGLE		3597  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION		3608  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_SPEED		3619  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES_ELM		3630  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_RANGES		3641  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MINRANGE		3648  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_MAXRANGE		3659  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION_ELM		3670  /**/
#define ERR_BASE_SAMPLES_LASERSCAN_REMISSION		3681  /**/
flag asn1SccBase_samples_LaserScan_IsConstraintValid(const asn1SccBase_samples_LaserScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN		3688  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_TIME_2		3593  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3604  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3615  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3626  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES		3642  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3637  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3655  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3666  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION		3682  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3677  /**/
#define asn1SccBase_samples_LaserScan_REQUIRED_BYTES_FOR_ENCODING       3457 
#define asn1SccBase_samples_LaserScan_REQUIRED_BITS_FOR_ENCODING        27656

flag asn1SccBase_samples_LaserScan_Encode(const asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN		3689  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_TIME_2		3594  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_START_ANGLE_2		3605  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION_2		3616  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_SPEED_2		3627  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES		3643  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM_2		3638  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MINRANGE_2		3656  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_MAXRANGE_2		3667  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION		3683  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM_2		3678  /**/
flag asn1SccBase_samples_LaserScan_Decode(asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN		3690  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_TIME		3589  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_TIME_MICROSECONDS		3579  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_START_ANGLE		3600  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION		3611  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_SPEED		3622  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES		3644  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM		3633  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_MINRANGE		3651  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_MAXRANGE		3662  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION		3684  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM		3673  /**/
#define asn1SccBase_samples_LaserScan_REQUIRED_BYTES_FOR_ACN_ENCODING       3457 
#define asn1SccBase_samples_LaserScan_REQUIRED_BITS_FOR_ACN_ENCODING        27656

flag asn1SccBase_samples_LaserScan_ACN_Encode(const asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN		3691  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_TIME		3590  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_TIME_MICROSECONDS		3580  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_START_ANGLE		3601  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_ANGULAR_RESOLUTION		3612  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_SPEED		3623  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_RANGES		3645  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_RANGES_ELM		3634  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_MINRANGE		3652  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_MAXRANGE		3663  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION		3685  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_LASERSCAN_REMISSION_ELM		3674  /**/
flag asn1SccBase_samples_LaserScan_ACN_Decode(asn1SccBase_samples_LaserScan* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Pointcloud --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccWrappers_Vector3d arr[200];
} asn1SccBase_samples_Pointcloud_points;


typedef struct {
    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccBase_samples_Pointcloud_colors;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Pointcloud_points points;
    asn1SccBase_samples_Pointcloud_colors colors;

} asn1SccBase_samples_Pointcloud;

void asn1SccBase_samples_Pointcloud_points_Initialize(asn1SccBase_samples_Pointcloud_points* pVal);
void asn1SccBase_samples_Pointcloud_colors_Initialize(asn1SccBase_samples_Pointcloud_colors* pVal);
void asn1SccBase_samples_Pointcloud_Initialize(asn1SccBase_samples_Pointcloud* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_TIME_MICROSECONDS		3694  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA_ELM		3715  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA		3726  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_POINTS		3743  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA_ELM		3750  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA		3761  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_COLORS		3778  /**/
flag asn1SccBase_samples_Pointcloud_IsConstraintValid(const asn1SccBase_samples_Pointcloud* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD		3785  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3711  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS		3744  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3739  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS		3779  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3774  /**/
#define asn1SccBase_samples_Pointcloud_REQUIRED_BYTES_FOR_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_REQUIRED_BITS_FOR_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_Encode(const asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD		3786  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_TIME_2		3712  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS		3745  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_2		3740  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS		3780  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_2		3775  /**/
flag asn1SccBase_samples_Pointcloud_Decode(asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD		3787  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_TIME		3707  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_TIME_MICROSECONDS		3697  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS		3746  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM		3735  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA		3729  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA_ELM		3718  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS		3781  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM		3770  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA		3764  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA_ELM		3753  /**/
#define asn1SccBase_samples_Pointcloud_REQUIRED_BYTES_FOR_ACN_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_REQUIRED_BITS_FOR_ACN_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_ACN_Encode(const asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD		3788  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_TIME		3708  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_TIME_MICROSECONDS		3698  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS		3747  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM		3736  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA		3730  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_POINTS_ELM_DATA_ELM		3719  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS		3782  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM		3771  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA		3765  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_COLORS_ELM_DATA_ELM		3754  /**/
flag asn1SccBase_samples_Pointcloud_ACN_Decode(asn1SccBase_samples_Pointcloud* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Sonar --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_Sonar_timestamps;


typedef struct {
    int nCount; 
    
    asn1SccBase_Angle arr[200];
} asn1SccBase_samples_Sonar_bearings;


typedef struct {
    int nCount; 
    
    asn1SccT_Float arr[200];
} asn1SccBase_samples_Sonar_bins;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Sonar_timestamps timestamps;
    asn1SccBase_Time bin_duration;
    asn1SccBase_Angle beam_width;
    asn1SccBase_Angle beam_height;
    asn1SccBase_samples_Sonar_bearings bearings;
    asn1SccT_Float speed_of_sound;
    asn1SccT_UInt32 bin_count;
    asn1SccT_UInt32 beam_count;
    asn1SccBase_samples_Sonar_bins bins;

} asn1SccBase_samples_Sonar;

void asn1SccBase_samples_Sonar_timestamps_Initialize(asn1SccBase_samples_Sonar_timestamps* pVal);
void asn1SccBase_samples_Sonar_bearings_Initialize(asn1SccBase_samples_Sonar_bearings* pVal);
void asn1SccBase_samples_Sonar_bins_Initialize(asn1SccBase_samples_Sonar_bins* pVal);
void asn1SccBase_samples_Sonar_Initialize(asn1SccBase_samples_Sonar* pVal);

#define ERR_BASE_SAMPLES_SONAR_TIME_MICROSECONDS		4075  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_MICROSECONDS		4096  /**/
#define ERR_BASE_SAMPLES_SONAR_TIMESTAMPS		4117  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_DURATION_MICROSECONDS		4124  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_WIDTH_RAD		4145  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_HEIGHT_RAD		4166  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS_ELM_RAD		4187  /**/
#define ERR_BASE_SAMPLES_SONAR_BEARINGS		4208  /**/
#define ERR_BASE_SAMPLES_SONAR_SPEED_OF_SOUND		4215  /**/
#define ERR_BASE_SAMPLES_SONAR_BIN_COUNT		4226  /**/
#define ERR_BASE_SAMPLES_SONAR_BEAM_COUNT		4237  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS_ELM		4248  /**/
#define ERR_BASE_SAMPLES_SONAR_BINS		4259  /**/
flag asn1SccBase_samples_Sonar_IsConstraintValid(const asn1SccBase_samples_Sonar* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR		4266  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIME_2		4092  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4118  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4113  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4141  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4162  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4183  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS		4209  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4204  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4222  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4233  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4244  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS		4260  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4255  /**/
#define asn1SccBase_samples_Sonar_REQUIRED_BYTES_FOR_ENCODING       6866 
#define asn1SccBase_samples_Sonar_REQUIRED_BITS_FOR_ENCODING        54928

flag asn1SccBase_samples_Sonar_Encode(const asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR		4267  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIME_2		4093  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4119  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_2		4114  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_DURATION_2		4142  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_2		4163  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_2		4184  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS		4210  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_2		4205  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND_2		4223  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BIN_COUNT_2		4234  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BEAM_COUNT_2		4245  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS		4261  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONAR_BINS_ELM_2		4256  /**/
flag asn1SccBase_samples_Sonar_Decode(asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR		4268  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_TIME		4088  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_TIME_MICROSECONDS		4078  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4120  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM		4109  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_MICROSECONDS		4099  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BIN_DURATION		4137  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BIN_DURATION_MICROSECONDS		4127  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEAM_WIDTH		4158  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_RAD		4148  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT		4179  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_RAD		4169  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEARINGS		4211  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEARINGS_ELM		4200  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_RAD		4190  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND		4218  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BIN_COUNT		4229  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BEAM_COUNT		4240  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BINS		4262  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONAR_BINS_ELM		4251  /**/
#define asn1SccBase_samples_Sonar_REQUIRED_BYTES_FOR_ACN_ENCODING       6866 
#define asn1SccBase_samples_Sonar_REQUIRED_BITS_FOR_ACN_ENCODING        54928

flag asn1SccBase_samples_Sonar_ACN_Encode(const asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR		4269  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_TIME		4089  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_TIME_MICROSECONDS		4079  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS		4121  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM		4110  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_TIMESTAMPS_ELM_MICROSECONDS		4100  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BIN_DURATION		4138  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BIN_DURATION_MICROSECONDS		4128  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEAM_WIDTH		4159  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEAM_WIDTH_RAD		4149  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT		4180  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEAM_HEIGHT_RAD		4170  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEARINGS		4212  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEARINGS_ELM		4201  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEARINGS_ELM_RAD		4191  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_SPEED_OF_SOUND		4219  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BIN_COUNT		4230  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BEAM_COUNT		4241  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BINS		4263  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONAR_BINS_ELM		4252  /**/
flag asn1SccBase_samples_Sonar_ACN_Decode(asn1SccBase_samples_Sonar* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_SonarBeam --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[200];
} asn1SccBase_samples_SonarBeam_beam;


typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_Angle bearing;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccT_Float beamwidth_horizontal;
    asn1SccT_Float beamwidth_vertical;
    asn1SccBase_samples_SonarBeam_beam beam;

} asn1SccBase_samples_SonarBeam;

void asn1SccBase_samples_SonarBeam_beam_Initialize(asn1SccBase_samples_SonarBeam_beam* pVal);
void asn1SccBase_samples_SonarBeam_Initialize(asn1SccBase_samples_SonarBeam* pVal);

#define ERR_BASE_SAMPLES_SONARBEAM_TIME_MICROSECONDS		4272  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEARING_RAD		4293  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL		4314  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND		4325  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL		4336  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL		4347  /**/
#define ERR_BASE_SAMPLES_SONARBEAM_BEAM		4358  /**/
flag asn1SccBase_samples_SonarBeam_IsConstraintValid(const asn1SccBase_samples_SonarBeam* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM		4365  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_TIME_2		4289  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4310  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4321  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4332  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4343  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4354  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM		4359  /**/
#define asn1SccBase_samples_SonarBeam_REQUIRED_BYTES_FOR_ENCODING       274 
#define asn1SccBase_samples_SonarBeam_REQUIRED_BITS_FOR_ENCODING        2192

flag asn1SccBase_samples_SonarBeam_Encode(const asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM		4366  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_TIME_2		4290  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEARING_2		4311  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL_2		4322  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND_2		4333  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL_2		4344  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL_2		4355  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARBEAM_BEAM		4360  /**/
flag asn1SccBase_samples_SonarBeam_Decode(asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM		4367  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_TIME		4285  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_TIME_MICROSECONDS		4275  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_BEARING		4306  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_BEARING_RAD		4296  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL		4317  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND		4328  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL		4339  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL		4350  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARBEAM_BEAM		4361  /**/
#define asn1SccBase_samples_SonarBeam_REQUIRED_BYTES_FOR_ACN_ENCODING       274 
#define asn1SccBase_samples_SonarBeam_REQUIRED_BITS_FOR_ACN_ENCODING        2192

flag asn1SccBase_samples_SonarBeam_ACN_Encode(const asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM		4368  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_TIME		4286  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_TIME_MICROSECONDS		4276  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_BEARING		4307  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_BEARING_RAD		4297  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_SAMPLING_INTERVAL		4318  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_SPEED_OF_SOUND		4329  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_HORIZONTAL		4340  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_BEAMWIDTH_VERTICAL		4351  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARBEAM_BEAM		4362  /**/
flag asn1SccBase_samples_SonarBeam_ACN_Decode(asn1SccBase_samples_SonarBeam* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_SonarScan --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[200];
} asn1SccBase_samples_SonarScan_data;



typedef struct {
    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_samples_SonarScan_time_beams;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_SonarScan_data data;
    asn1SccBase_samples_SonarScan_time_beams time_beams;
    asn1SccT_UInt16 number_of_beams;
    asn1SccT_UInt16 number_of_bins;
    asn1SccBase_Angle start_bearing;
    asn1SccBase_Angle angular_resolution;
    asn1SccT_Double sampling_interval;
    asn1SccT_Float speed_of_sound;
    asn1SccBase_Angle beamwidth_horizontal;
    asn1SccBase_Angle beamwidth_vertical;
    asn1SccT_Boolean memory_layout_column;
    asn1SccT_Boolean polar_coordinates;

} asn1SccBase_samples_SonarScan;

void asn1SccBase_samples_SonarScan_data_Initialize(asn1SccBase_samples_SonarScan_data* pVal);
void asn1SccBase_samples_SonarScan_time_beams_Initialize(asn1SccBase_samples_SonarScan_time_beams* pVal);
void asn1SccBase_samples_SonarScan_Initialize(asn1SccBase_samples_SonarScan* pVal);

#define ERR_BASE_SAMPLES_SONARSCAN_TIME_MICROSECONDS		4371  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_DATA		4392  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_MICROSECONDS		4399  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4420  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS		4427  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS		4438  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_START_BEARING_RAD		4449  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_RAD		4470  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL		4491  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND		4502  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_RAD		4513  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_RAD		4534  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN		4555  /**/
#define ERR_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES		4566  /**/
flag asn1SccBase_samples_SonarScan_IsConstraintValid(const asn1SccBase_samples_SonarScan* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN		4577  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_2		4388  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_DATA		4393  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4421  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4416  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4434  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4445  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4466  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4487  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4498  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4509  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4530  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4551  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4562  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4573  /**/
#define asn1SccBase_samples_SonarScan_REQUIRED_BYTES_FOR_ENCODING       1893 
#define asn1SccBase_samples_SonarScan_REQUIRED_BITS_FOR_ENCODING        15138

flag asn1SccBase_samples_SonarScan_Encode(const asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN		4578  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_2		4389  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_DATA		4394  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4422  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_2		4417  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS_2		4435  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS_2		4446  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_START_BEARING_2		4467  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_2		4488  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL_2		4499  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND_2		4510  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_2		4531  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_2		4552  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN_2		4563  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES_2		4574  /**/
flag asn1SccBase_samples_SonarScan_Decode(asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN		4579  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_TIME		4384  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_MICROSECONDS		4374  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_DATA		4395  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4423  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM		4412  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_MICROSECONDS		4402  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS		4430  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS		4441  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_START_BEARING		4462  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_START_BEARING_RAD		4452  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION		4483  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_RAD		4473  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL		4494  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND		4505  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL		4526  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_RAD		4516  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL		4547  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_RAD		4537  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN		4558  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES		4569  /**/
#define asn1SccBase_samples_SonarScan_REQUIRED_BYTES_FOR_ACN_ENCODING       1893 
#define asn1SccBase_samples_SonarScan_REQUIRED_BITS_FOR_ACN_ENCODING        15138

flag asn1SccBase_samples_SonarScan_ACN_Encode(const asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN		4580  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_TIME		4385  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_TIME_MICROSECONDS		4375  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_DATA		4396  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS		4424  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM		4413  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_TIME_BEAMS_ELM_MICROSECONDS		4403  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BEAMS		4431  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_NUMBER_OF_BINS		4442  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_START_BEARING		4463  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_START_BEARING_RAD		4453  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION		4484  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_ANGULAR_RESOLUTION_RAD		4474  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_SAMPLING_INTERVAL		4495  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_SPEED_OF_SOUND		4506  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL		4527  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_HORIZONTAL_RAD		4517  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL		4548  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_BEAMWIDTH_VERTICAL_RAD		4538  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_MEMORY_LAYOUT_COLUMN		4559  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_SONARSCAN_POLAR_COORDINATES		4570  /**/
flag asn1SccBase_samples_SonarScan_ACN_Decode(asn1SccBase_samples_SonarScan* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_commands_LinearAngular6DCommand_m --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d linear;
    asn1SccWrappers_Vector3d angular;

} asn1SccBase_commands_LinearAngular6DCommand_m;

void asn1SccBase_commands_LinearAngular6DCommand_m_Initialize(asn1SccBase_commands_LinearAngular6DCommand_m* pVal);

#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_MICROSECONDS		6326  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA_ELM		6347  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA		6358  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA_ELM		6375  /**/
#define ERR_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA		6386  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_IsConstraintValid(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6403  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6343  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6371  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6399  /**/
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_commands_LinearAngular6DCommand_m_Encode(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6404  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_2		6344  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_2		6372  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_2		6400  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_Decode(asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6405  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME		6339  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_MICROSECONDS		6329  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR		6367  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA		6361  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA_ELM		6350  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR		6395  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA		6389  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA_ELM		6378  /**/
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define asn1SccBase_commands_LinearAngular6DCommand_m_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag asn1SccBase_commands_LinearAngular6DCommand_m_ACN_Encode(const asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M		6406  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME		6340  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_TIME_MICROSECONDS		6330  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR		6368  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA		6362  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_LINEAR_DATA_ELM		6351  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR		6396  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA		6390  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_LINEARANGULAR6DCOMMAND_M_ANGULAR_DATA_ELM		6379  /**/
flag asn1SccBase_commands_LinearAngular6DCommand_m_ACN_Decode(asn1SccBase_commands_LinearAngular6DCommand_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_BodyState_m --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_TransformWithCovariance_m pose;
    asn1SccBase_TwistWithCovariance_m velocity;

} asn1SccBase_samples_BodyState_m;

void asn1SccBase_samples_BodyState_m_Initialize(asn1SccBase_samples_BodyState_m* pVal);

#define ERR_BASE_SAMPLES_BODYSTATE_M_TIME_MICROSECONDS		6409  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA_ELM		6430  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA		6441  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM_ELM		6458  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM		6469  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_RE		6476  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA_ELM		6497  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA		6508  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA_ELM		6535  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA		6546  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA_ELM		6563  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA		6574  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA_ELM		6591  /**/
#define ERR_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA		6602  /**/
flag asn1SccBase_samples_BodyState_m_IsConstraintValid(const asn1SccBase_samples_BodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M		6629  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6426  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6531  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6625  /**/
#define asn1SccBase_samples_BodyState_m_REQUIRED_BYTES_FOR_ENCODING       1116 
#define asn1SccBase_samples_BodyState_m_REQUIRED_BITS_FOR_ENCODING        8924

flag asn1SccBase_samples_BodyState_m_Encode(const asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M		6630  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_TIME_2		6427  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_2		6532  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_2		6626  /**/
flag asn1SccBase_samples_BodyState_m_Decode(asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M		6631  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_TIME		6422  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_TIME_MICROSECONDS		6412  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE		6527  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION		6450  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA		6444  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA_ELM		6433  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION		6489  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM		6472  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM_ELM		6461  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_RE		6479  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_COV		6517  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA		6511  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA_ELM		6500  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY		6621  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL		6555  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA		6549  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA_ELM		6538  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT		6583  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA		6577  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA_ELM		6566  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV		6611  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA		6605  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA_ELM		6594  /**/
#define asn1SccBase_samples_BodyState_m_REQUIRED_BYTES_FOR_ACN_ENCODING       1116 
#define asn1SccBase_samples_BodyState_m_REQUIRED_BITS_FOR_ACN_ENCODING        8924

flag asn1SccBase_samples_BodyState_m_ACN_Encode(const asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M		6632  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_TIME		6423  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_TIME_MICROSECONDS		6413  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE		6528  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION		6451  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA		6445  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_TRANSLATION_DATA_ELM		6434  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION		6490  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM		6473  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_IM_ELM		6462  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_ORIENTATION_RE		6480  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_COV		6518  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA		6512  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_POSE_COV_DATA_ELM		6501  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY		6622  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL		6556  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA		6550  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_VEL_DATA_ELM		6539  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT		6584  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA		6578  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_ROT_DATA_ELM		6567  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV		6612  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA		6606  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_BODYSTATE_M_VELOCITY_COV_DATA_ELM		6595  /**/
flag asn1SccBase_samples_BodyState_m_ACN_Decode(asn1SccBase_samples_BodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_IMUSensors_m --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acc;
    asn1SccWrappers_Vector3d gyro;
    asn1SccWrappers_Vector3d mag;

} asn1SccBase_samples_IMUSensors_m;

void asn1SccBase_samples_IMUSensors_m_Initialize(asn1SccBase_samples_IMUSensors_m* pVal);

#define ERR_BASE_SAMPLES_IMUSENSORS_M_TIME_MICROSECONDS		6635  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA_ELM		6656  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA		6667  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA_ELM		6684  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA		6695  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA_ELM		6712  /**/
#define ERR_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA		6723  /**/
flag asn1SccBase_samples_IMUSensors_m_IsConstraintValid(const asn1SccBase_samples_IMUSensors_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M		6740  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6652  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6680  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6708  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6736  /**/
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BYTES_FOR_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BITS_FOR_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_m_Encode(const asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M		6741  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_TIME_2		6653  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC_2		6681  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_2		6709  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG_2		6737  /**/
flag asn1SccBase_samples_IMUSensors_m_Decode(asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M		6742  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_TIME		6648  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_TIME_MICROSECONDS		6638  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC		6676  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA		6670  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA_ELM		6659  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO		6704  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA		6698  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA_ELM		6687  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG		6732  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA		6726  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA_ELM		6715  /**/
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BYTES_FOR_ACN_ENCODING       126 
#define asn1SccBase_samples_IMUSensors_m_REQUIRED_BITS_FOR_ACN_ENCODING        1006

flag asn1SccBase_samples_IMUSensors_m_ACN_Encode(const asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M		6743  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_TIME		6649  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_TIME_MICROSECONDS		6639  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC		6677  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA		6671  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_ACC_DATA_ELM		6660  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO		6705  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA		6699  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_GYRO_DATA_ELM		6688  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG		6733  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA		6727  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_IMUSENSORS_M_MAG_DATA_ELM		6716  /**/
flag asn1SccBase_samples_IMUSensors_m_ACN_Decode(asn1SccBase_samples_IMUSensors_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_RigidBodyAcceleration_m --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccWrappers_Vector3d acceleration;
    asn1SccWrappers_Matrix3d cov_acceleration;
    asn1SccWrappers_Vector3d angular_acceleration;
    asn1SccWrappers_Matrix3d cov_angular_acceleration;

} asn1SccBase_samples_RigidBodyAcceleration_m;

void asn1SccBase_samples_RigidBodyAcceleration_m_Initialize(asn1SccBase_samples_RigidBodyAcceleration_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_MICROSECONDS		6746  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA_ELM		6767  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA		6778  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA_ELM		6795  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA		6806  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA_ELM		6823  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA		6834  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA_ELM		6851  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA		6862  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_IsConstraintValid(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		6879  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6763  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		6791  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		6819  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		6847  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		6875  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BYTES_FOR_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BITS_FOR_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_m_Encode(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		6880  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_2		6764  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_2		6792  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_2		6820  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_2		6848  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_2		6876  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_Decode(asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		6881  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME		6759  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_MICROSECONDS		6749  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION		6787  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA		6781  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA_ELM		6770  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION		6815  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA		6809  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA_ELM		6798  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION		6843  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA		6837  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA_ELM		6826  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION		6871  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA		6865  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA_ELM		6854  /**/
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BYTES_FOR_ACN_ENCODING       322 
#define asn1SccBase_samples_RigidBodyAcceleration_m_REQUIRED_BITS_FOR_ACN_ENCODING        2572

flag asn1SccBase_samples_RigidBodyAcceleration_m_ACN_Encode(const asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M		6882  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME		6760  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_TIME_MICROSECONDS		6750  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION		6788  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA		6782  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ACCELERATION_DATA_ELM		6771  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION		6816  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA		6810  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ACCELERATION_DATA_ELM		6799  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION		6844  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA		6838  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_ANGULAR_ACCELERATION_DATA_ELM		6827  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION		6872  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA		6866  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYACCELERATION_M_COV_ANGULAR_ACCELERATION_DATA_ELM		6855  /**/
flag asn1SccBase_samples_RigidBodyAcceleration_m_ACN_Decode(asn1SccBase_samples_RigidBodyAcceleration_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Wrench_m --------------------------------------------*/

typedef struct {
    asn1SccWrappers_Vector3d force;
    asn1SccWrappers_Vector3d torque;
    asn1SccBase_Time time;

} asn1SccBase_samples_Wrench_m;

void asn1SccBase_samples_Wrench_m_Initialize(asn1SccBase_samples_Wrench_m* pVal);

#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA_ELM		7169  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_FORCE_DATA		7180  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA_ELM		7197  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TORQUE_DATA		7208  /**/
#define ERR_BASE_SAMPLES_WRENCH_M_TIME_MICROSECONDS		7225  /**/
flag asn1SccBase_samples_Wrench_m_IsConstraintValid(const asn1SccBase_samples_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M		7246  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7193  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7221  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCH_M_TIME_2		7242  /**/
#define asn1SccBase_samples_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       87 
#define asn1SccBase_samples_Wrench_m_REQUIRED_BITS_FOR_ENCODING        692

flag asn1SccBase_samples_Wrench_m_Encode(const asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M		7247  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_FORCE_2		7194  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE_2		7222  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCH_M_TIME_2		7243  /**/
flag asn1SccBase_samples_Wrench_m_Decode(asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M		7248  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE		7189  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE_DATA		7183  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_FORCE_DATA_ELM		7172  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE		7217  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE_DATA		7211  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_TORQUE_DATA_ELM		7200  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_TIME		7238  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCH_M_TIME_MICROSECONDS		7228  /**/
#define asn1SccBase_samples_Wrench_m_REQUIRED_BYTES_FOR_ACN_ENCODING       87 
#define asn1SccBase_samples_Wrench_m_REQUIRED_BITS_FOR_ACN_ENCODING        692

flag asn1SccBase_samples_Wrench_m_ACN_Encode(const asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M		7249  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_FORCE		7190  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_FORCE_DATA		7184  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_FORCE_DATA_ELM		7173  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE		7218  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE_DATA		7212  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_TORQUE_DATA_ELM		7201  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_TIME		7239  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCH_M_TIME_MICROSECONDS		7229  /**/
flag asn1SccBase_samples_Wrench_m_ACN_Decode(asn1SccBase_samples_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Pointcloud_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccWrappers_Vector3d arr[200];
} asn1SccBase_samples_Pointcloud_m_points;


typedef struct {
    int nCount; 
    
    asn1SccWrappers_Vector4d arr[200];
} asn1SccBase_samples_Pointcloud_m_colors;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_Pointcloud_m_points points;
    asn1SccBase_samples_Pointcloud_m_colors colors;

} asn1SccBase_samples_Pointcloud_m;

void asn1SccBase_samples_Pointcloud_m_points_Initialize(asn1SccBase_samples_Pointcloud_m_points* pVal);
void asn1SccBase_samples_Pointcloud_m_colors_Initialize(asn1SccBase_samples_Pointcloud_m_colors* pVal);
void asn1SccBase_samples_Pointcloud_m_Initialize(asn1SccBase_samples_Pointcloud_m* pVal);

#define ERR_BASE_SAMPLES_POINTCLOUD_M_TIME_MICROSECONDS		7543  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA_ELM		7564  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA		7575  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_POINTS		7592  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA_ELM		7599  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA		7610  /**/
#define ERR_BASE_SAMPLES_POINTCLOUD_M_COLORS		7627  /**/
flag asn1SccBase_samples_Pointcloud_m_IsConstraintValid(const asn1SccBase_samples_Pointcloud_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M		7634  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7560  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7593  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7588  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7628  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7623  /**/
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BYTES_FOR_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BITS_FOR_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_m_Encode(const asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M		7635  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_TIME_2		7561  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7594  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_2		7589  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7629  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_2		7624  /**/
flag asn1SccBase_samples_Pointcloud_m_Decode(asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M		7636  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_TIME		7556  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_TIME_MICROSECONDS		7546  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7595  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM		7584  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA		7578  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA_ELM		7567  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7630  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM		7619  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA		7613  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA_ELM		7602  /**/
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BYTES_FOR_ACN_ENCODING       18310 
#define asn1SccBase_samples_Pointcloud_m_REQUIRED_BITS_FOR_ACN_ENCODING        146480

flag asn1SccBase_samples_Pointcloud_m_ACN_Encode(const asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M		7637  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_TIME		7557  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_TIME_MICROSECONDS		7547  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS		7596  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM		7585  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA		7579  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_POINTS_ELM_DATA_ELM		7568  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS		7631  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM		7620  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA		7614  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_POINTCLOUD_M_COLORS_ELM_DATA_ELM		7603  /**/
flag asn1SccBase_samples_Pointcloud_m_ACN_Decode(asn1SccBase_samples_Pointcloud_m* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount; 
    
    byte arr[40];
} asn1SccT_String;


void asn1SccT_String_Initialize(asn1SccT_String* pVal);

#define ERR_T_STRING		8121  /**/
flag asn1SccT_String_IsConstraintValid(const asn1SccT_String* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_STRING		8122  /**/
#define asn1SccT_String_REQUIRED_BYTES_FOR_ENCODING       41 
#define asn1SccT_String_REQUIRED_BITS_FOR_ENCODING        326

flag asn1SccT_String_Encode(const asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_STRING		8123  /**/
flag asn1SccT_String_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_STRING		8124  /**/
#define asn1SccT_String_REQUIRED_BYTES_FOR_ACN_ENCODING       41 
#define asn1SccT_String_REQUIRED_BITS_FOR_ACN_ENCODING        326

flag asn1SccT_String_ACN_Encode(const asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_STRING		8125  /**/
flag asn1SccT_String_ACN_Decode(asn1SccT_String* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointLimits --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointLimits_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_JointLimitRange arr[200];
} asn1SccBase_JointLimits_elements;

typedef struct {
    asn1SccBase_JointLimits_names names;
    asn1SccBase_JointLimits_elements elements;

} asn1SccBase_JointLimits;

void asn1SccBase_JointLimits_names_Initialize(asn1SccBase_JointLimits_names* pVal);
void asn1SccBase_JointLimits_elements_Initialize(asn1SccBase_JointLimits_elements* pVal);
void asn1SccBase_JointLimits_Initialize(asn1SccBase_JointLimits* pVal);

#define ERR_BASE_JOINTLIMITS_NAMES_ELM		2336  /**/
#define ERR_BASE_JOINTLIMITS_NAMES		2347  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_POSITION		2354  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_SPEED		2365  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_EFFORT		2376  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_RAW		2387  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_ACCELERATION		2398  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_POSITION		2419  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_SPEED		2430  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_EFFORT		2441  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_RAW		2452  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_ACCELERATION		2463  /**/
#define ERR_BASE_JOINTLIMITS_ELEMENTS		2494  /**/
flag asn1SccBase_JointLimits_IsConstraintValid(const asn1SccBase_JointLimits* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTLIMITS		2501  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES		2348  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_NAMES_ELM_2		2343  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS		2495  /**/
#define ERR_UPER_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2490  /**/
#define asn1SccBase_JointLimits_REQUIRED_BYTES_FOR_ENCODING       34152 
#define asn1SccBase_JointLimits_REQUIRED_BITS_FOR_ENCODING        273216

flag asn1SccBase_JointLimits_Encode(const asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTLIMITS		2502  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES		2349  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_NAMES_ELM_2		2344  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS		2496  /**/
#define ERR_UPER_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_2		2491  /**/
flag asn1SccBase_JointLimits_Decode(asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTLIMITS		2503  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_NAMES		2350  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_NAMES_ELM		2339  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS		2497  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM		2486  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN		2411  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_POSITION		2357  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_SPEED		2368  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_EFFORT		2379  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_RAW		2390  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_ACCELERATION		2401  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX		2476  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_POSITION		2422  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_SPEED		2433  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_EFFORT		2444  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_RAW		2455  /**/
#define ERR_ACN_ENCODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_ACCELERATION		2466  /**/
#define asn1SccBase_JointLimits_REQUIRED_BYTES_FOR_ACN_ENCODING       34152 
#define asn1SccBase_JointLimits_REQUIRED_BITS_FOR_ACN_ENCODING        273216

flag asn1SccBase_JointLimits_ACN_Encode(const asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTLIMITS		2504  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_NAMES		2351  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_NAMES_ELM		2340  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS		2498  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM		2487  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN		2412  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_POSITION		2358  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_SPEED		2369  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_EFFORT		2380  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_RAW		2391  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MIN_ACCELERATION		2402  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX		2477  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_POSITION		2423  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_SPEED		2434  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_EFFORT		2445  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_RAW		2456  /**/
#define ERR_ACN_DECODE_BASE_JOINTLIMITS_ELEMENTS_ELM_MAX_ACCELERATION		2467  /**/
flag asn1SccBase_JointLimits_ACN_Decode(asn1SccBase_JointLimits* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointTransform --------------------------------------------*/

typedef struct {
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d rotationaxis;

} asn1SccBase_JointTransform;

void asn1SccBase_JointTransform_Initialize(asn1SccBase_JointTransform* pVal);

#define ERR_BASE_JOINTTRANSFORM_SOURCEFRAME		2507  /**/
#define ERR_BASE_JOINTTRANSFORM_TARGETFRAME		2518  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA_ELM		2529  /**/
#define ERR_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA		2540  /**/
flag asn1SccBase_JointTransform_IsConstraintValid(const asn1SccBase_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM		2557  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2514  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2525  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2553  /**/
#define asn1SccBase_JointTransform_REQUIRED_BYTES_FOR_ENCODING       121 
#define asn1SccBase_JointTransform_REQUIRED_BITS_FOR_ENCODING        966

flag asn1SccBase_JointTransform_Encode(const asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM		2558  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_SOURCEFRAME_2		2515  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_TARGETFRAME_2		2526  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_2		2554  /**/
flag asn1SccBase_JointTransform_Decode(asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM		2559  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_SOURCEFRAME		2510  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_TARGETFRAME		2521  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS		2549  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA		2543  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA_ELM		2532  /**/
#define asn1SccBase_JointTransform_REQUIRED_BYTES_FOR_ACN_ENCODING       121 
#define asn1SccBase_JointTransform_REQUIRED_BITS_FOR_ACN_ENCODING        966

flag asn1SccBase_JointTransform_ACN_Encode(const asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM		2560  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_SOURCEFRAME		2511  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_TARGETFRAME		2522  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS		2550  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA		2544  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_ROTATIONAXIS_DATA_ELM		2533  /**/
flag asn1SccBase_JointTransform_ACN_Decode(asn1SccBase_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointTransformVector --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointTransformVector_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_JointTransform arr[200];
} asn1SccBase_JointTransformVector_elements;

typedef struct {
    asn1SccBase_JointTransformVector_names names;
    asn1SccBase_JointTransformVector_elements elements;

} asn1SccBase_JointTransformVector;

void asn1SccBase_JointTransformVector_names_Initialize(asn1SccBase_JointTransformVector_names* pVal);
void asn1SccBase_JointTransformVector_elements_Initialize(asn1SccBase_JointTransformVector_elements* pVal);
void asn1SccBase_JointTransformVector_Initialize(asn1SccBase_JointTransformVector* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM		4729  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_NAMES		4740  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_SOURCEFRAME		4747  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_TARGETFRAME		4758  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4769  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA		4780  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4807  /**/
flag asn1SccBase_JointTransformVector_IsConstraintValid(const asn1SccBase_JointTransformVector* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR		4814  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4741  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4736  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4808  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4803  /**/
#define asn1SccBase_JointTransformVector_REQUIRED_BYTES_FOR_ENCODING       32302 
#define asn1SccBase_JointTransformVector_REQUIRED_BITS_FOR_ENCODING        258416

flag asn1SccBase_JointTransformVector_Encode(const asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR		4815  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4742  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM_2		4737  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4809  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_2		4804  /**/
flag asn1SccBase_JointTransformVector_Decode(asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR		4816  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4743  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM		4732  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4810  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM		4799  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_SOURCEFRAME		4750  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_TARGETFRAME		4761  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS		4789  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA		4783  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4772  /**/
#define asn1SccBase_JointTransformVector_REQUIRED_BYTES_FOR_ACN_ENCODING       32302 
#define asn1SccBase_JointTransformVector_REQUIRED_BITS_FOR_ACN_ENCODING        258416

flag asn1SccBase_JointTransformVector_ACN_Encode(const asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR		4817  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES		4744  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_NAMES_ELM		4733  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS		4811  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM		4800  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_SOURCEFRAME		4751  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_TARGETFRAME		4762  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS		4790  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA		4784  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4773  /**/
flag asn1SccBase_JointTransformVector_ACN_Decode(asn1SccBase_JointTransformVector* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_Base_JointTransform --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointTransform_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_JointTransform arr[200];
} asn1SccBase_NamedVector_Base_JointTransform_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointTransform_names names;
    asn1SccBase_NamedVector_Base_JointTransform_elements elements;

} asn1SccBase_NamedVector_Base_JointTransform;

void asn1SccBase_NamedVector_Base_JointTransform_names_Initialize(asn1SccBase_NamedVector_Base_JointTransform_names* pVal);
void asn1SccBase_NamedVector_Base_JointTransform_elements_Initialize(asn1SccBase_NamedVector_Base_JointTransform_elements* pVal);
void asn1SccBase_NamedVector_Base_JointTransform_Initialize(asn1SccBase_NamedVector_Base_JointTransform* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM		4820  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4831  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_SOURCEFRAME		4838  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_TARGETFRAME		4849  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4860  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA		4871  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4898  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		4905  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4832  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4827  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4899  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		4894  /**/
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       32302 
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BITS_FOR_ENCODING        258416

flag asn1SccBase_NamedVector_Base_JointTransform_Encode(const asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		4906  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4833  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM_2		4828  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4900  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_2		4895  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_Decode(asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		4907  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4834  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM		4823  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4901  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM		4890  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_SOURCEFRAME		4841  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_TARGETFRAME		4852  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS		4880  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA		4874  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4863  /**/
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BYTES_FOR_ACN_ENCODING       32302 
#define asn1SccBase_NamedVector_Base_JointTransform_REQUIRED_BITS_FOR_ACN_ENCODING        258416

flag asn1SccBase_NamedVector_Base_JointTransform_ACN_Encode(const asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM		4908  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES		4835  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_NAMES_ELM		4824  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS		4902  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM		4891  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_SOURCEFRAME		4842  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_TARGETFRAME		4853  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS		4881  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA		4875  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		4864  /**/
flag asn1SccBase_NamedVector_Base_JointTransform_ACN_Decode(asn1SccBase_NamedVector_Base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointsTrajectory --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointsTrajectory_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_JointTrajectory arr[200];
} asn1SccBase_JointsTrajectory_elements;


typedef struct {
    int nCount; 
    
    asn1SccBase_Time arr[200];
} asn1SccBase_JointsTrajectory_times_val;

typedef struct {
    asn1SccBase_JointsTrajectory_names names;
    asn1SccBase_JointsTrajectory_elements elements;
    asn1SccBase_JointsTrajectory_times_val times_val;

} asn1SccBase_JointsTrajectory;

void asn1SccBase_JointsTrajectory_names_Initialize(asn1SccBase_JointsTrajectory_names* pVal);
void asn1SccBase_JointsTrajectory_elements_Initialize(asn1SccBase_JointsTrajectory_elements* pVal);
void asn1SccBase_JointsTrajectory_times_val_Initialize(asn1SccBase_JointsTrajectory_times_val* pVal);
void asn1SccBase_JointsTrajectory_Initialize(asn1SccBase_JointsTrajectory* pVal);

#define ERR_BASE_JOINTSTRAJECTORY_NAMES_ELM		2563  /**/
#define ERR_BASE_JOINTSTRAJECTORY_NAMES		2574  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		2581  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		2592  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		2603  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_RAW		2614  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		2625  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM		2646  /**/
#define ERR_BASE_JOINTSTRAJECTORY_ELEMENTS		2657  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_MICROSECONDS		2664  /**/
#define ERR_BASE_JOINTSTRAJECTORY_TIMES_VAL		2685  /**/
flag asn1SccBase_JointsTrajectory_IsConstraintValid(const asn1SccBase_JointsTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY		2692  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES		2575  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2570  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2658  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2653  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2686  /**/
#define ERR_UPER_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2681  /**/
#define asn1SccBase_JointsTrajectory_REQUIRED_BYTES_FOR_ENCODING       2609953 
#define asn1SccBase_JointsTrajectory_REQUIRED_BITS_FOR_ENCODING        20879624

flag asn1SccBase_JointsTrajectory_Encode(const asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY		2693  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES		2576  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_NAMES_ELM_2		2571  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2659  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_2		2654  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2687  /**/
#define ERR_UPER_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_2		2682  /**/
flag asn1SccBase_JointsTrajectory_Decode(asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY		2694  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_NAMES		2577  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_NAMES_ELM		2566  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2660  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM		2649  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM		2638  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		2584  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		2595  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		2606  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_RAW		2617  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		2628  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2688  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM		2677  /**/
#define ERR_ACN_ENCODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_MICROSECONDS		2667  /**/
#define asn1SccBase_JointsTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING       2609953 
#define asn1SccBase_JointsTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING        20879624

flag asn1SccBase_JointsTrajectory_ACN_Encode(const asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY		2695  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_NAMES		2578  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_NAMES_ELM		2567  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS		2661  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM		2650  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM		2639  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		2585  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		2596  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		2607  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_RAW		2618  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		2629  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL		2689  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM		2678  /**/
#define ERR_ACN_DECODE_BASE_JOINTSTRAJECTORY_TIMES_VAL_ELM_MICROSECONDS		2668  /**/
flag asn1SccBase_JointsTrajectory_ACN_Decode(asn1SccBase_JointsTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_Base_JointLimitRange --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointLimitRange_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_JointLimitRange arr[200];
} asn1SccBase_NamedVector_Base_JointLimitRange_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointLimitRange_names names;
    asn1SccBase_NamedVector_Base_JointLimitRange_elements elements;

} asn1SccBase_NamedVector_Base_JointLimitRange;

void asn1SccBase_NamedVector_Base_JointLimitRange_names_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange_names* pVal);
void asn1SccBase_NamedVector_Base_JointLimitRange_elements_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange_elements* pVal);
void asn1SccBase_NamedVector_Base_JointLimitRange_Initialize(asn1SccBase_NamedVector_Base_JointLimitRange* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM		2698  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2709  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_POSITION		2716  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_SPEED		2727  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_EFFORT		2738  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_RAW		2749  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_ACCELERATION		2760  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_POSITION		2781  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_SPEED		2792  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_EFFORT		2803  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_RAW		2814  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_ACCELERATION		2825  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2856  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2863  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2710  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2705  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2857  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2852  /**/
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BYTES_FOR_ENCODING       34152 
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BITS_FOR_ENCODING        273216

flag asn1SccBase_NamedVector_Base_JointLimitRange_Encode(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2864  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2711  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM_2		2706  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2858  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_2		2853  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_Decode(asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2865  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2712  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM		2701  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2859  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM		2848  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN		2773  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_POSITION		2719  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_SPEED		2730  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_EFFORT		2741  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_RAW		2752  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_ACCELERATION		2763  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX		2838  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_POSITION		2784  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_SPEED		2795  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_EFFORT		2806  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_RAW		2817  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_ACCELERATION		2828  /**/
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BYTES_FOR_ACN_ENCODING       34152 
#define asn1SccBase_NamedVector_Base_JointLimitRange_REQUIRED_BITS_FOR_ACN_ENCODING        273216

flag asn1SccBase_NamedVector_Base_JointLimitRange_ACN_Encode(const asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE		2866  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES		2713  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_NAMES_ELM		2702  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS		2860  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM		2849  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN		2774  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_POSITION		2720  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_SPEED		2731  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_EFFORT		2742  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_RAW		2753  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MIN_ACCELERATION		2764  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX		2839  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_POSITION		2785  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_SPEED		2796  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_EFFORT		2807  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_RAW		2818  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTLIMITRANGE_ELEMENTS_ELM_MAX_ACCELERATION		2829  /**/
flag asn1SccBase_NamedVector_Base_JointLimitRange_ACN_Decode(asn1SccBase_NamedVector_Base_JointLimitRange* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_Base_JointState --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointState_names;

typedef struct {
    asn1SccBase_NamedVector_Base_JointState_names names;
    asn1SccBase_JointTrajectory elements;

} asn1SccBase_NamedVector_Base_JointState;

void asn1SccBase_NamedVector_Base_JointState_names_Initialize(asn1SccBase_NamedVector_Base_JointState_names* pVal);
void asn1SccBase_NamedVector_Base_JointState_Initialize(asn1SccBase_NamedVector_Base_JointState* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM		2869  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2880  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_POSITION		2887  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_SPEED		2898  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_EFFORT		2909  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_RAW		2920  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_ACCELERATION		2931  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS		2952  /**/
flag asn1SccBase_NamedVector_Base_JointState_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		2963  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2881  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2876  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		2959  /**/
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BYTES_FOR_ENCODING       21152 
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BITS_FOR_ENCODING        169216

flag asn1SccBase_NamedVector_Base_JointState_Encode(const asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		2964  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2882  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM_2		2877  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_2		2960  /**/
flag asn1SccBase_NamedVector_Base_JointState_Decode(asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		2965  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2883  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM		2872  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS		2955  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM		2944  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_POSITION		2890  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_SPEED		2901  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_EFFORT		2912  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_RAW		2923  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_ACCELERATION		2934  /**/
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BYTES_FOR_ACN_ENCODING       21152 
#define asn1SccBase_NamedVector_Base_JointState_REQUIRED_BITS_FOR_ACN_ENCODING        169216

flag asn1SccBase_NamedVector_Base_JointState_ACN_Encode(const asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE		2966  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES		2884  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_NAMES_ELM		2873  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS		2956  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM		2945  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_POSITION		2891  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_SPEED		2902  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_EFFORT		2913  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_RAW		2924  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTSTATE_ELEMENTS_ELM_ACCELERATION		2935  /**/
flag asn1SccBase_NamedVector_Base_JointState_ACN_Decode(asn1SccBase_NamedVector_Base_JointState* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_Base_Wrench --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_Wrench_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_Wrench arr[200];
} asn1SccBase_NamedVector_Base_Wrench_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_Wrench_names names;
    asn1SccBase_NamedVector_Base_Wrench_elements elements;

} asn1SccBase_NamedVector_Base_Wrench;

void asn1SccBase_NamedVector_Base_Wrench_names_Initialize(asn1SccBase_NamedVector_Base_Wrench_names* pVal);
void asn1SccBase_NamedVector_Base_Wrench_elements_Initialize(asn1SccBase_NamedVector_Base_Wrench_elements* pVal);
void asn1SccBase_NamedVector_Base_Wrench_Initialize(asn1SccBase_NamedVector_Base_Wrench* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM		2969  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2980  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA_ELM		2987  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA		2998  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA_ELM		3015  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA		3026  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3053  /**/
flag asn1SccBase_NamedVector_Base_Wrench_IsConstraintValid(const asn1SccBase_NamedVector_Base_Wrench* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH		3060  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2981  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		2976  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3054  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3049  /**/
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BYTES_FOR_ENCODING       23852 
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BITS_FOR_ENCODING        190816

flag asn1SccBase_NamedVector_Base_Wrench_Encode(const asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH		3061  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2982  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM_2		2977  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3055  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_2		3050  /**/
flag asn1SccBase_NamedVector_Base_Wrench_Decode(asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH		3062  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2983  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM		2972  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3056  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM		3045  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE		3007  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA		3001  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA_ELM		2990  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE		3035  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA		3029  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA_ELM		3018  /**/
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BYTES_FOR_ACN_ENCODING       23852 
#define asn1SccBase_NamedVector_Base_Wrench_REQUIRED_BITS_FOR_ACN_ENCODING        190816

flag asn1SccBase_NamedVector_Base_Wrench_ACN_Encode(const asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH		3063  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES		2984  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_NAMES_ELM		2973  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS		3057  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM		3046  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE		3008  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA		3002  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_FORCE_DATA_ELM		2991  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE		3036  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA		3030  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_ELEMENTS_ELM_TORQUE_DATA_ELM		3019  /**/
flag asn1SccBase_NamedVector_Base_Wrench_ACN_Decode(asn1SccBase_NamedVector_Base_Wrench* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_Base_JointTrajectory --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_Base_JointTrajectory_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_JointTrajectory arr[200];
} asn1SccBase_NamedVector_Base_JointTrajectory_elements;

typedef struct {
    asn1SccBase_NamedVector_Base_JointTrajectory_names names;
    asn1SccBase_NamedVector_Base_JointTrajectory_elements elements;

} asn1SccBase_NamedVector_Base_JointTrajectory;

void asn1SccBase_NamedVector_Base_JointTrajectory_names_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory_names* pVal);
void asn1SccBase_NamedVector_Base_JointTrajectory_elements_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory_elements* pVal);
void asn1SccBase_NamedVector_Base_JointTrajectory_Initialize(asn1SccBase_NamedVector_Base_JointTrajectory* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM		3066  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3077  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		3084  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		3095  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		3106  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_RAW		3117  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		3128  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM		3149  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3160  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_IsConstraintValid(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3167  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3078  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3073  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3161  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3156  /**/
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BYTES_FOR_ENCODING       2608352 
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BITS_FOR_ENCODING        20866816

flag asn1SccBase_NamedVector_Base_JointTrajectory_Encode(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3168  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3079  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM_2		3074  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3162  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_2		3157  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_Decode(asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3169  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3080  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM		3069  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3163  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM		3152  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM		3141  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		3087  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		3098  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		3109  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_RAW		3120  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		3131  /**/
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BYTES_FOR_ACN_ENCODING       2608352 
#define asn1SccBase_NamedVector_Base_JointTrajectory_REQUIRED_BITS_FOR_ACN_ENCODING        20866816

flag asn1SccBase_NamedVector_Base_JointTrajectory_ACN_Encode(const asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY		3170  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES		3081  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_NAMES_ELM		3070  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS		3164  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM		3153  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM		3142  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_POSITION		3088  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_SPEED		3099  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_EFFORT		3110  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_RAW		3121  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRAJECTORY_ELEMENTS_ELM_ELM_ACCELERATION		3132  /**/
flag asn1SccBase_NamedVector_Base_JointTrajectory_ACN_Decode(asn1SccBase_NamedVector_Base_JointTrajectory* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_commands_Joints --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_commands_Joints_names;

typedef struct {
    asn1SccBase_commands_Joints_names names;
    asn1SccBase_JointTrajectory elements;
    asn1SccBase_Time time;

} asn1SccBase_commands_Joints;

void asn1SccBase_commands_Joints_names_Initialize(asn1SccBase_commands_Joints_names* pVal);
void asn1SccBase_commands_Joints_Initialize(asn1SccBase_commands_Joints* pVal);

#define ERR_BASE_COMMANDS_JOINTS_NAMES_ELM		3455  /**/
#define ERR_BASE_COMMANDS_JOINTS_NAMES		3466  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_POSITION		3473  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_SPEED		3484  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_EFFORT		3495  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_RAW		3506  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_ACCELERATION		3517  /**/
#define ERR_BASE_COMMANDS_JOINTS_ELEMENTS		3538  /**/
#define ERR_BASE_COMMANDS_JOINTS_TIME_MICROSECONDS		3549  /**/
flag asn1SccBase_commands_Joints_IsConstraintValid(const asn1SccBase_commands_Joints* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS		3570  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES		3467  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3462  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3545  /**/
#define ERR_UPER_ENCODE_BASE_COMMANDS_JOINTS_TIME_2		3566  /**/
#define asn1SccBase_commands_Joints_REQUIRED_BYTES_FOR_ENCODING       21160 
#define asn1SccBase_commands_Joints_REQUIRED_BITS_FOR_ENCODING        169280

flag asn1SccBase_commands_Joints_Encode(const asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS		3571  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES		3468  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_NAMES_ELM_2		3463  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_2		3546  /**/
#define ERR_UPER_DECODE_BASE_COMMANDS_JOINTS_TIME_2		3567  /**/
flag asn1SccBase_commands_Joints_Decode(asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS		3572  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_NAMES		3469  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_NAMES_ELM		3458  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS		3541  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM		3530  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_POSITION		3476  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_SPEED		3487  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_EFFORT		3498  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_RAW		3509  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_ACCELERATION		3520  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_TIME		3562  /**/
#define ERR_ACN_ENCODE_BASE_COMMANDS_JOINTS_TIME_MICROSECONDS		3552  /**/
#define asn1SccBase_commands_Joints_REQUIRED_BYTES_FOR_ACN_ENCODING       21160 
#define asn1SccBase_commands_Joints_REQUIRED_BITS_FOR_ACN_ENCODING        169280

flag asn1SccBase_commands_Joints_ACN_Encode(const asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS		3573  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_NAMES		3470  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_NAMES_ELM		3459  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS		3542  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM		3531  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_POSITION		3477  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_SPEED		3488  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_EFFORT		3499  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_RAW		3510  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_ELEMENTS_ELM_ACCELERATION		3521  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_TIME		3563  /**/
#define ERR_ACN_DECODE_BASE_COMMANDS_JOINTS_TIME_MICROSECONDS		3553  /**/
flag asn1SccBase_commands_Joints_ACN_Decode(asn1SccBase_commands_Joints* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_RigidBodyState --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Matrix3d cov_position;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix3d cov_orientation;
    asn1SccWrappers_Vector3d velocity;
    asn1SccWrappers_Matrix3d cov_velocity;
    asn1SccWrappers_Vector3d angular_velocity;
    asn1SccWrappers_Matrix3d cov_angular_velocity;

} asn1SccBase_samples_RigidBodyState;

void asn1SccBase_samples_RigidBodyState_Initialize(asn1SccBase_samples_RigidBodyState* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TIME_MICROSECONDS		3791  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME		3812  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME		3823  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA_ELM		3834  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA		3845  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA_ELM		3862  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA		3873  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM_ELM		3890  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM		3901  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_RE		3908  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA_ELM		3929  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA		3940  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA_ELM		3957  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA		3968  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA_ELM		3985  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA		3996  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA_ELM		4013  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA		4024  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA_ELM		4041  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA		4052  /**/
flag asn1SccBase_samples_RigidBodyState_IsConstraintValid(const asn1SccBase_samples_RigidBodyState* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE		4069  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3808  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3819  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3830  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3858  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		3886  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		3925  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		3953  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		3981  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4009  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4037  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4065  /**/
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BYTES_FOR_ENCODING       730 
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BITS_FOR_ENCODING        5836

flag asn1SccBase_samples_RigidBodyState_Encode(const asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE		4070  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_2		3809  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME_2		3820  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME_2		3831  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_2		3859  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_2		3887  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_2		3926  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_2		3954  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_2		3982  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_2		4010  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_2		4038  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_2		4066  /**/
flag asn1SccBase_samples_RigidBodyState_Decode(asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE		4071  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME		3804  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_MICROSECONDS		3794  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME		3815  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME		3826  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION		3854  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA		3848  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA_ELM		3837  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION		3882  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA		3876  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA_ELM		3865  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION		3921  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM		3904  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM_ELM		3893  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_RE		3911  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION		3949  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA		3943  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA_ELM		3932  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY		3977  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA		3971  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA_ELM		3960  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY		4005  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA		3999  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA_ELM		3988  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY		4033  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA		4027  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA_ELM		4016  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY		4061  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA		4055  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA_ELM		4044  /**/
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BYTES_FOR_ACN_ENCODING       730 
#define asn1SccBase_samples_RigidBodyState_REQUIRED_BITS_FOR_ACN_ENCODING        5836

flag asn1SccBase_samples_RigidBodyState_ACN_Encode(const asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE		4072  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME		3805  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TIME_MICROSECONDS		3795  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_SOURCEFRAME		3816  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_TARGETFRAME		3827  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION		3855  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA		3849  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_POSITION_DATA_ELM		3838  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION		3883  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA		3877  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_POSITION_DATA_ELM		3866  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION		3922  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM		3905  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_IM_ELM		3894  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ORIENTATION_RE		3912  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION		3950  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA		3944  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ORIENTATION_DATA_ELM		3933  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY		3978  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA		3972  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_VELOCITY_DATA_ELM		3961  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY		4006  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA		4000  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_VELOCITY_DATA_ELM		3989  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY		4034  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA		4028  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_ANGULAR_VELOCITY_DATA_ELM		4017  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY		4062  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA		4056  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_COV_ANGULAR_VELOCITY_DATA_ELM		4045  /**/
flag asn1SccBase_samples_RigidBodyState_ACN_Decode(asn1SccBase_samples_RigidBodyState* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Wrenches --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_samples_Wrenches_names;


typedef struct {
    int nCount; 
    
    asn1SccBase_Wrench arr[200];
} asn1SccBase_samples_Wrenches_elements;

typedef struct {
    asn1SccBase_samples_Wrenches_names names;
    asn1SccBase_samples_Wrenches_elements elements;
    asn1SccBase_Time time;

} asn1SccBase_samples_Wrenches;

void asn1SccBase_samples_Wrenches_names_Initialize(asn1SccBase_samples_Wrenches_names* pVal);
void asn1SccBase_samples_Wrenches_elements_Initialize(asn1SccBase_samples_Wrenches_elements* pVal);
void asn1SccBase_samples_Wrenches_Initialize(asn1SccBase_samples_Wrenches* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_NAMES_ELM		4583  /**/
#define ERR_BASE_SAMPLES_WRENCHES_NAMES		4594  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA_ELM		4601  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA		4612  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA_ELM		4629  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA		4640  /**/
#define ERR_BASE_SAMPLES_WRENCHES_ELEMENTS		4667  /**/
#define ERR_BASE_SAMPLES_WRENCHES_TIME_MICROSECONDS		4674  /**/
flag asn1SccBase_samples_Wrenches_IsConstraintValid(const asn1SccBase_samples_Wrenches* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES		4695  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES		4595  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4590  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4668  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4663  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_TIME_2		4691  /**/
#define asn1SccBase_samples_Wrenches_REQUIRED_BYTES_FOR_ENCODING       23860 
#define asn1SccBase_samples_Wrenches_REQUIRED_BITS_FOR_ENCODING        190880

flag asn1SccBase_samples_Wrenches_Encode(const asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES		4696  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES		4596  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_NAMES_ELM_2		4591  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4669  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_2		4664  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_TIME_2		4692  /**/
flag asn1SccBase_samples_Wrenches_Decode(asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES		4697  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_NAMES		4597  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_NAMES_ELM		4586  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4670  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM		4659  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE		4621  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA		4615  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA_ELM		4604  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE		4649  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA		4643  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA_ELM		4632  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_TIME		4687  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_TIME_MICROSECONDS		4677  /**/
#define asn1SccBase_samples_Wrenches_REQUIRED_BYTES_FOR_ACN_ENCODING       23860 
#define asn1SccBase_samples_Wrenches_REQUIRED_BITS_FOR_ACN_ENCODING        190880

flag asn1SccBase_samples_Wrenches_ACN_Encode(const asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES		4698  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_NAMES		4598  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_NAMES_ELM		4587  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS		4671  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM		4660  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE		4622  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA		4616  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_FORCE_DATA_ELM		4605  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE		4650  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA		4644  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_ELEMENTS_ELM_TORQUE_DATA_ELM		4633  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_TIME		4688  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_TIME_MICROSECONDS		4678  /**/
flag asn1SccBase_samples_Wrenches_ACN_Decode(asn1SccBase_samples_Wrenches* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_frame_frame_attrib_t --------------------------------------------*/

typedef struct {
    asn1SccT_String data;
    asn1SccT_String name_val;

} asn1SccBase_samples_frame_frame_attrib_t;

void asn1SccBase_samples_frame_frame_attrib_t_Initialize(asn1SccBase_samples_frame_frame_attrib_t* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA		4701  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL		4712  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_IsConstraintValid(const asn1SccBase_samples_frame_frame_attrib_t* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4723  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4708  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4719  /**/
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BYTES_FOR_ENCODING       82 
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BITS_FOR_ENCODING        652

flag asn1SccBase_samples_frame_frame_attrib_t_Encode(const asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4724  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA_2		4709  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL_2		4720  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_Decode(asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4725  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA		4704  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL		4715  /**/
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BYTES_FOR_ACN_ENCODING       82 
#define asn1SccBase_samples_frame_frame_attrib_t_REQUIRED_BITS_FOR_ACN_ENCODING        652

flag asn1SccBase_samples_frame_frame_attrib_t_ACN_Encode(const asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T		4726  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_DATA		4705  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIB_T_NAME_VAL		4716  /**/
flag asn1SccBase_samples_frame_frame_attrib_t_ACN_Decode(asn1SccBase_samples_frame_frame_attrib_t* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_frame_Frame --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[200];
} asn1SccBase_samples_frame_Frame_image;



typedef struct {
    int nCount; 
    
    asn1SccBase_samples_frame_frame_attrib_t arr[200];
} asn1SccBase_samples_frame_Frame_attributes;

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_Time received_time;
    asn1SccBase_samples_frame_Frame_image image;
    asn1SccBase_samples_frame_Frame_attributes attributes;
    asn1SccBase_samples_frame_frame_size_t size_val;
    asn1SccT_UInt32 data_depth;
    asn1SccT_UInt32 pixel_size;
    asn1SccT_UInt32 row_size;
    asn1SccBase_samples_frame_frame_mode_t frame_mode;
    asn1SccBase_samples_frame_frame_status_t frame_status;

} asn1SccBase_samples_frame_Frame;

void asn1SccBase_samples_frame_Frame_image_Initialize(asn1SccBase_samples_frame_Frame_image* pVal);
void asn1SccBase_samples_frame_Frame_attributes_Initialize(asn1SccBase_samples_frame_Frame_attributes* pVal);
void asn1SccBase_samples_frame_Frame_Initialize(asn1SccBase_samples_frame_Frame* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAME_TIME_MICROSECONDS		4911  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_MICROSECONDS		4932  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_IMAGE		4953  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_DATA		4960  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_NAME_VAL		4971  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		4992  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_WIDTH		4999  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_HEIGHT		5010  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH		5031  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE		5042  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE		5053  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE		5064  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS		5075  /**/
flag asn1SccBase_samples_frame_Frame_IsConstraintValid(const asn1SccBase_samples_frame_Frame* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME		5086  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		4928  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		4949  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		4954  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		4993  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		4988  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5027  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5038  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5049  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5060  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5071  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5082  /**/
#define asn1SccBase_samples_frame_Frame_REQUIRED_BYTES_FOR_ENCODING       16535 
#define asn1SccBase_samples_frame_Frame_REQUIRED_BITS_FOR_ENCODING        132278

flag asn1SccBase_samples_frame_Frame_Encode(const asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME		5087  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_TIME_2		4929  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_2		4950  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		4955  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		4994  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_2		4989  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_2		5028  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH_2		5039  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE_2		5050  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE_2		5061  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE_2		5072  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS_2		5083  /**/
flag asn1SccBase_samples_frame_Frame_Decode(asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME		5088  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_TIME		4924  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_TIME_MICROSECONDS		4914  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME		4945  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_MICROSECONDS		4935  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		4956  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		4995  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM		4984  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_DATA		4963  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_NAME_VAL		4974  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL		5023  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_WIDTH		5002  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_HEIGHT		5013  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH		5034  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE		5045  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE		5056  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE		5067  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS		5078  /**/
#define asn1SccBase_samples_frame_Frame_REQUIRED_BYTES_FOR_ACN_ENCODING       16535 
#define asn1SccBase_samples_frame_Frame_REQUIRED_BITS_FOR_ACN_ENCODING        132278

flag asn1SccBase_samples_frame_Frame_ACN_Encode(const asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME		5089  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_TIME		4925  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_TIME_MICROSECONDS		4915  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME		4946  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_RECEIVED_TIME_MICROSECONDS		4936  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_IMAGE		4957  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES		4996  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM		4985  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_DATA		4964  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ATTRIBUTES_ELM_NAME_VAL		4975  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL		5024  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_WIDTH		5003  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_SIZE_VAL_HEIGHT		5014  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_DATA_DEPTH		5035  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_PIXEL_SIZE		5046  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_ROW_SIZE		5057  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_MODE		5068  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAME_FRAME_STATUS		5079  /**/
flag asn1SccBase_samples_frame_Frame_ACN_Decode(asn1SccBase_samples_frame_Frame* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_frame_FramePair --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccBase_samples_frame_Frame first;
    asn1SccBase_samples_frame_Frame second;
    asn1SccT_UInt32 id;

} asn1SccBase_samples_frame_FramePair;

void asn1SccBase_samples_frame_FramePair_Initialize(asn1SccBase_samples_frame_FramePair* pVal);

#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_MICROSECONDS		5092  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME_MICROSECONDS		5113  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME_MICROSECONDS		5134  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE		5155  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_DATA		5162  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_NAME_VAL		5173  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES		5194  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_WIDTH		5201  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_HEIGHT		5212  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_DATA_DEPTH		5233  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_PIXEL_SIZE		5244  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ROW_SIZE		5255  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_MODE		5266  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_STATUS		5277  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME_MICROSECONDS		5298  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME_MICROSECONDS		5319  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE		5340  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_DATA		5347  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_NAME_VAL		5358  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES		5379  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_WIDTH		5386  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_HEIGHT		5397  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_DATA_DEPTH		5418  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_PIXEL_SIZE		5429  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ROW_SIZE		5440  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_MODE		5451  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_STATUS		5462  /**/
#define ERR_BASE_SAMPLES_FRAME_FRAMEPAIR_ID		5483  /**/
flag asn1SccBase_samples_frame_FramePair_IsConstraintValid(const asn1SccBase_samples_frame_FramePair* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5494  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5109  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5294  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5479  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5490  /**/
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BYTES_FOR_ENCODING       33082 
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BITS_FOR_ENCODING        264652

flag asn1SccBase_samples_frame_FramePair_Encode(const asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5495  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_2		5110  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_2		5295  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_2		5480  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID_2		5491  /**/
flag asn1SccBase_samples_frame_FramePair_Decode(asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5496  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME		5105  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_MICROSECONDS		5095  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST		5290  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME		5126  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME_MICROSECONDS		5116  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME		5147  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME_MICROSECONDS		5137  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE		5158  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES		5197  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM		5186  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_DATA		5165  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_NAME_VAL		5176  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL		5225  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_WIDTH		5204  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_HEIGHT		5215  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_DATA_DEPTH		5236  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_PIXEL_SIZE		5247  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ROW_SIZE		5258  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_MODE		5269  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_STATUS		5280  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND		5475  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME		5311  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME_MICROSECONDS		5301  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME		5332  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME_MICROSECONDS		5322  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE		5343  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES		5382  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM		5371  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_DATA		5350  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_NAME_VAL		5361  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL		5410  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_WIDTH		5389  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_HEIGHT		5400  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_DATA_DEPTH		5421  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_PIXEL_SIZE		5432  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ROW_SIZE		5443  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_MODE		5454  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_STATUS		5465  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID		5486  /**/
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BYTES_FOR_ACN_ENCODING       33082 
#define asn1SccBase_samples_frame_FramePair_REQUIRED_BITS_FOR_ACN_ENCODING        264652

flag asn1SccBase_samples_frame_FramePair_ACN_Encode(const asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR		5497  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME		5106  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_TIME_MICROSECONDS		5096  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST		5291  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME		5127  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_TIME_MICROSECONDS		5117  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME		5148  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_RECEIVED_TIME_MICROSECONDS		5138  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_IMAGE		5159  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES		5198  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM		5187  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_DATA		5166  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ATTRIBUTES_ELM_NAME_VAL		5177  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL		5226  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_WIDTH		5205  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_SIZE_VAL_HEIGHT		5216  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_DATA_DEPTH		5237  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_PIXEL_SIZE		5248  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_ROW_SIZE		5259  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_MODE		5270  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_FIRST_FRAME_STATUS		5281  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND		5476  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME		5312  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_TIME_MICROSECONDS		5302  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME		5333  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_RECEIVED_TIME_MICROSECONDS		5323  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_IMAGE		5344  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES		5383  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM		5372  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_DATA		5351  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ATTRIBUTES_ELM_NAME_VAL		5362  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL		5411  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_WIDTH		5390  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_SIZE_VAL_HEIGHT		5401  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_DATA_DEPTH		5422  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_PIXEL_SIZE		5433  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_ROW_SIZE		5444  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_MODE		5455  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_SECOND_FRAME_STATUS		5466  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_FRAME_FRAMEPAIR_ID		5487  /**/
flag asn1SccBase_samples_frame_FramePair_ACN_Decode(asn1SccBase_samples_frame_FramePair* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointTransform_m --------------------------------------------*/

typedef struct {
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d rotationaxis;

} asn1SccBase_JointTransform_m;

void asn1SccBase_JointTransform_m_Initialize(asn1SccBase_JointTransform_m* pVal);

#define ERR_BASE_JOINTTRANSFORM_M_SOURCEFRAME		5832  /**/
#define ERR_BASE_JOINTTRANSFORM_M_TARGETFRAME		5843  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA_ELM		5854  /**/
#define ERR_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA		5865  /**/
flag asn1SccBase_JointTransform_m_IsConstraintValid(const asn1SccBase_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M		5882  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		5839  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		5850  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		5878  /**/
#define asn1SccBase_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       121 
#define asn1SccBase_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        966

flag asn1SccBase_JointTransform_m_Encode(const asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M		5883  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME_2		5840  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_TARGETFRAME_2		5851  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_2		5879  /**/
flag asn1SccBase_JointTransform_m_Decode(asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_M		5884  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME		5835  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_M_TARGETFRAME		5846  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS		5874  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA		5868  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA_ELM		5857  /**/
#define asn1SccBase_JointTransform_m_REQUIRED_BYTES_FOR_ACN_ENCODING       121 
#define asn1SccBase_JointTransform_m_REQUIRED_BITS_FOR_ACN_ENCODING        966

flag asn1SccBase_JointTransform_m_ACN_Encode(const asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_M		5885  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_M_SOURCEFRAME		5836  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_M_TARGETFRAME		5847  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS		5875  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA		5869  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORM_M_ROTATIONAXIS_DATA_ELM		5858  /**/
flag asn1SccBase_JointTransform_m_ACN_Decode(asn1SccBase_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    asn1SccBase_JointTransform_m arr[200];
} asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform;

void asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Initialize(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal);

#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_SOURCEFRAME		158  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_TARGETFRAME		169  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA_ELM		180  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA		191  /**/
#define ERR_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		218  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_IsConstraintValid(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		219  /**/
#define ERR_UPER_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		214  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BYTES_FOR_ENCODING       24151 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BITS_FOR_ENCODING        193208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		220  /**/
#define ERR_UPER_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_2		215  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		221  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM		210  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_SOURCEFRAME		161  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_TARGETFRAME		172  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS		200  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA		194  /**/
#define ERR_ACN_ENCODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA_ELM		183  /**/
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BYTES_FOR_ACN_ENCODING       24151 
#define asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_REQUIRED_BITS_FOR_ACN_ENCODING        193208

flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_ACN_Encode(const asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM		222  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM		211  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_SOURCEFRAME		162  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_TARGETFRAME		173  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS		201  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA		195  /**/
#define ERR_ACN_DECODE_STD_OROGEN_TYPEKITS_MTYPE_STD_VECTOR_BASE_JOINTTRANSFORM_ELM_ROTATIONAXIS_DATA_ELM		184  /**/
flag asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform_ACN_Decode(asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_JointTransformVector_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_JointTransformVector_m_names;

typedef struct {
    asn1SccBase_JointTransformVector_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform elements;

} asn1SccBase_JointTransformVector_m;

void asn1SccBase_JointTransformVector_m_names_Initialize(asn1SccBase_JointTransformVector_m_names* pVal);
void asn1SccBase_JointTransformVector_m_Initialize(asn1SccBase_JointTransformVector_m* pVal);

#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM		7252  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7263  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_SOURCEFRAME		7270  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_TARGETFRAME		7281  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7292  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7303  /**/
#define ERR_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS		7330  /**/
flag asn1SccBase_JointTransformVector_m_IsConstraintValid(const asn1SccBase_JointTransformVector_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M		7341  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7264  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7259  /**/
#define ERR_UPER_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7337  /**/
#define asn1SccBase_JointTransformVector_m_REQUIRED_BYTES_FOR_ENCODING       32302 
#define asn1SccBase_JointTransformVector_m_REQUIRED_BITS_FOR_ENCODING        258416

flag asn1SccBase_JointTransformVector_m_Encode(const asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M		7342  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7265  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM_2		7260  /**/
#define ERR_UPER_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_2		7338  /**/
flag asn1SccBase_JointTransformVector_m_Decode(asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M		7343  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7266  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM		7255  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS		7333  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM		7322  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_SOURCEFRAME		7273  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_TARGETFRAME		7284  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS		7312  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7306  /**/
#define ERR_ACN_ENCODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7295  /**/
#define asn1SccBase_JointTransformVector_m_REQUIRED_BYTES_FOR_ACN_ENCODING       32302 
#define asn1SccBase_JointTransformVector_m_REQUIRED_BITS_FOR_ACN_ENCODING        258416

flag asn1SccBase_JointTransformVector_m_ACN_Encode(const asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M		7344  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES		7267  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_NAMES_ELM		7256  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS		7334  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM		7323  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_SOURCEFRAME		7274  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_TARGETFRAME		7285  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS		7313  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7307  /**/
#define ERR_ACN_DECODE_BASE_JOINTTRANSFORMVECTOR_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7296  /**/
flag asn1SccBase_JointTransformVector_m_ACN_Decode(asn1SccBase_JointTransformVector_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_base_JointTransform_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_base_JointTransform_m_names;

typedef struct {
    asn1SccBase_NamedVector_base_JointTransform_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_JointTransform elements;

} asn1SccBase_NamedVector_base_JointTransform_m;

void asn1SccBase_NamedVector_base_JointTransform_m_names_Initialize(asn1SccBase_NamedVector_base_JointTransform_m_names* pVal);
void asn1SccBase_NamedVector_base_JointTransform_m_Initialize(asn1SccBase_NamedVector_base_JointTransform_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM		7347  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7358  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_SOURCEFRAME		7365  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_TARGETFRAME		7376  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7387  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7398  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS		7425  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_IsConstraintValid(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7436  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7359  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7354  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7432  /**/
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BYTES_FOR_ENCODING       32302 
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BITS_FOR_ENCODING        258416

flag asn1SccBase_NamedVector_base_JointTransform_m_Encode(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7437  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7360  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM_2		7355  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_2		7433  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_Decode(asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7438  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7361  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM		7350  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS		7428  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM		7417  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_SOURCEFRAME		7368  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_TARGETFRAME		7379  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS		7407  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7401  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7390  /**/
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BYTES_FOR_ACN_ENCODING       32302 
#define asn1SccBase_NamedVector_base_JointTransform_m_REQUIRED_BITS_FOR_ACN_ENCODING        258416

flag asn1SccBase_NamedVector_base_JointTransform_m_ACN_Encode(const asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M		7439  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES		7362  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_NAMES_ELM		7351  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS		7429  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM		7418  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_SOURCEFRAME		7369  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_TARGETFRAME		7380  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS		7408  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA		7402  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_JOINTTRANSFORM_M_ELEMENTS_ELM_ROTATIONAXIS_DATA_ELM		7391  /**/
flag asn1SccBase_NamedVector_base_JointTransform_m_ACN_Decode(asn1SccBase_NamedVector_base_JointTransform_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_RigidBodyState_m --------------------------------------------*/

typedef struct {
    asn1SccBase_Time time;
    asn1SccT_String sourceframe;
    asn1SccT_String targetframe;
    asn1SccWrappers_Vector3d position;
    asn1SccWrappers_Matrix3d cov_position;
    asn1SccWrappers_Quaterniond orientation;
    asn1SccWrappers_Matrix3d cov_orientation;
    asn1SccWrappers_Vector3d velocity;
    asn1SccWrappers_Matrix3d cov_velocity;
    asn1SccWrappers_Vector3d angular_velocity;
    asn1SccWrappers_Matrix3d cov_angular_velocity;

} asn1SccBase_samples_RigidBodyState_m;

void asn1SccBase_samples_RigidBodyState_m_Initialize(asn1SccBase_samples_RigidBodyState_m* pVal);

#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_MICROSECONDS		6885  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME		6906  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME		6917  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA_ELM		6928  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA		6939  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA_ELM		6956  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA		6967  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM_ELM		6984  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM		6995  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_RE		7002  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA_ELM		7023  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA		7034  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA_ELM		7051  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA		7062  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA_ELM		7079  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA		7090  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA_ELM		7107  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA		7118  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA_ELM		7135  /**/
#define ERR_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA		7146  /**/
flag asn1SccBase_samples_RigidBodyState_m_IsConstraintValid(const asn1SccBase_samples_RigidBodyState_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7163  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		6902  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		6913  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		6924  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		6952  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		6980  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7019  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7047  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7075  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7103  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7131  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7159  /**/
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BYTES_FOR_ENCODING       730 
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BITS_FOR_ENCODING        5836

flag asn1SccBase_samples_RigidBodyState_m_Encode(const asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7164  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_2		6903  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME_2		6914  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME_2		6925  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_2		6953  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_2		6981  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_2		7020  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_2		7048  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_2		7076  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_2		7104  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_2		7132  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_2		7160  /**/
flag asn1SccBase_samples_RigidBodyState_m_Decode(asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7165  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME		6898  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_MICROSECONDS		6888  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME		6909  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME		6920  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION		6948  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA		6942  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA_ELM		6931  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION		6976  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA		6970  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA_ELM		6959  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION		7015  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM		6998  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM_ELM		6987  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_RE		7005  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION		7043  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA		7037  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA_ELM		7026  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY		7071  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA		7065  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA_ELM		7054  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY		7099  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA		7093  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA_ELM		7082  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY		7127  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA		7121  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA_ELM		7110  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY		7155  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA		7149  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA_ELM		7138  /**/
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BYTES_FOR_ACN_ENCODING       730 
#define asn1SccBase_samples_RigidBodyState_m_REQUIRED_BITS_FOR_ACN_ENCODING        5836

flag asn1SccBase_samples_RigidBodyState_m_ACN_Encode(const asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M		7166  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME		6899  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TIME_MICROSECONDS		6889  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_SOURCEFRAME		6910  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_TARGETFRAME		6921  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION		6949  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA		6943  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_POSITION_DATA_ELM		6932  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION		6977  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA		6971  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_POSITION_DATA_ELM		6960  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION		7016  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM		6999  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_IM_ELM		6988  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ORIENTATION_RE		7006  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION		7044  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA		7038  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ORIENTATION_DATA_ELM		7027  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY		7072  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA		7066  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_VELOCITY_DATA_ELM		7055  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY		7100  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA		7094  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_VELOCITY_DATA_ELM		7083  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY		7128  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA		7122  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_ANGULAR_VELOCITY_DATA_ELM		7111  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY		7156  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA		7150  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_RIGIDBODYSTATE_M_COV_ANGULAR_VELOCITY_DATA_ELM		7139  /**/
flag asn1SccBase_samples_RigidBodyState_m_ACN_Decode(asn1SccBase_samples_RigidBodyState_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_NamedVector_base_Wrench_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_NamedVector_base_Wrench_m_names;

typedef struct {
    asn1SccBase_NamedVector_base_Wrench_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench elements;

} asn1SccBase_NamedVector_base_Wrench_m;

void asn1SccBase_NamedVector_base_Wrench_m_names_Initialize(asn1SccBase_NamedVector_base_Wrench_m_names* pVal);
void asn1SccBase_NamedVector_base_Wrench_m_Initialize(asn1SccBase_NamedVector_base_Wrench_m* pVal);

#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM		7442  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7453  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA_ELM		7460  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA		7471  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7488  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA		7499  /**/
#define ERR_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS		7526  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_IsConstraintValid(const asn1SccBase_NamedVector_base_Wrench_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7537  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7454  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7449  /**/
#define ERR_UPER_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7533  /**/
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BYTES_FOR_ENCODING       23852 
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BITS_FOR_ENCODING        190816

flag asn1SccBase_NamedVector_base_Wrench_m_Encode(const asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7538  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7455  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM_2		7450  /**/
#define ERR_UPER_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_2		7534  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_Decode(asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7539  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7456  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM		7445  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS		7529  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM		7518  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE		7480  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA		7474  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA_ELM		7463  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE		7508  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA		7502  /**/
#define ERR_ACN_ENCODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7491  /**/
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BYTES_FOR_ACN_ENCODING       23852 
#define asn1SccBase_NamedVector_base_Wrench_m_REQUIRED_BITS_FOR_ACN_ENCODING        190816

flag asn1SccBase_NamedVector_base_Wrench_m_ACN_Encode(const asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M		7540  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES		7457  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_NAMES_ELM		7446  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS		7530  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM		7519  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE		7481  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA		7475  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_FORCE_DATA_ELM		7464  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE		7509  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA		7503  /**/
#define ERR_ACN_DECODE_BASE_NAMEDVECTOR_BASE_WRENCH_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7492  /**/
flag asn1SccBase_NamedVector_base_Wrench_m_ACN_Decode(asn1SccBase_NamedVector_base_Wrench_m* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccBase_samples_Wrenches_m --------------------------------------------*/


typedef struct {
    int nCount; 
    
    asn1SccT_String arr[200];
} asn1SccBase_samples_Wrenches_m_names;

typedef struct {
    asn1SccBase_samples_Wrenches_m_names names;
    asn1SccStd_orogen_typekits_mtype_std_vector_base_Wrench elements;
    asn1SccBase_Time time;

} asn1SccBase_samples_Wrenches_m;

void asn1SccBase_samples_Wrenches_m_names_Initialize(asn1SccBase_samples_Wrenches_m_names* pVal);
void asn1SccBase_samples_Wrenches_m_Initialize(asn1SccBase_samples_Wrenches_m* pVal);

#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES_ELM		7640  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_NAMES		7651  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA_ELM		7658  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA		7669  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7686  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA		7697  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_ELEMENTS		7724  /**/
#define ERR_BASE_SAMPLES_WRENCHES_M_TIME_MICROSECONDS		7735  /**/
flag asn1SccBase_samples_Wrenches_m_IsConstraintValid(const asn1SccBase_samples_Wrenches_m* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M		7756  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES		7652  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7647  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7731  /**/
#define ERR_UPER_ENCODE_BASE_SAMPLES_WRENCHES_M_TIME_2		7752  /**/
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BYTES_FOR_ENCODING       23860 
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BITS_FOR_ENCODING        190880

flag asn1SccBase_samples_Wrenches_m_Encode(const asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M		7757  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES		7653  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM_2		7648  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_2		7732  /**/
#define ERR_UPER_DECODE_BASE_SAMPLES_WRENCHES_M_TIME_2		7753  /**/
flag asn1SccBase_samples_Wrenches_m_Decode(asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M		7758  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES		7654  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM		7643  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS		7727  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM		7716  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE		7678  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA		7672  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA_ELM		7661  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE		7706  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA		7700  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7689  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_TIME		7748  /**/
#define ERR_ACN_ENCODE_BASE_SAMPLES_WRENCHES_M_TIME_MICROSECONDS		7738  /**/
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BYTES_FOR_ACN_ENCODING       23860 
#define asn1SccBase_samples_Wrenches_m_REQUIRED_BITS_FOR_ACN_ENCODING        190880

flag asn1SccBase_samples_Wrenches_m_ACN_Encode(const asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M		7759  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES		7655  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_NAMES_ELM		7644  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS		7728  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM		7717  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE		7679  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA		7673  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_FORCE_DATA_ELM		7662  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE		7707  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA		7701  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_ELEMENTS_ELM_TORQUE_DATA_ELM		7690  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_TIME		7749  /**/
#define ERR_ACN_DECODE_BASE_SAMPLES_WRENCHES_M_TIME_MICROSECONDS		7739  /**/
flag asn1SccBase_samples_Wrenches_m_ACN_Decode(asn1SccBase_samples_Wrenches_m* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccT_UInt32 numBase_JointTrajectory;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_JointTransform;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Waypoint;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Wrench;
extern const asn1SccT_UInt32 numStd_vector_Wrappers_Vector4d;
extern const asn1SccT_UInt32 numStd_orogen_typekits_mtype_std_vector_base_Trajectory;
extern const asn1SccT_UInt32 numBase_JointLimits_names;
extern const asn1SccT_UInt32 numBase_JointLimits_elements;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_names;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_elements;
extern const asn1SccT_UInt32 numBase_JointsTrajectory_times_val;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointLimitRange_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointLimitRange_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointState_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_Wrench_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_Wrench_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTrajectory_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTrajectory_elements;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_timestamps;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_vertical_interval;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_horizontal_interval;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_distances;
extern const asn1SccT_UInt32 numBase_samples_DepthMap_remissions;
extern const asn1SccT_UInt32 numBase_samples_DistanceImage_data;
extern const asn1SccT_UInt32 numBase_commands_Joints_names;
extern const asn1SccT_UInt32 numBase_samples_LaserScan_ranges;
extern const asn1SccT_UInt32 numBase_samples_LaserScan_remission;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_points;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_colors;
extern const asn1SccT_UInt32 numBase_samples_Sonar_timestamps;
extern const asn1SccT_UInt32 numBase_samples_Sonar_bearings;
extern const asn1SccT_UInt32 numBase_samples_Sonar_bins;
extern const asn1SccT_UInt32 numBase_samples_SonarBeam_beam;
extern const asn1SccT_UInt32 numBase_samples_SonarScan_data;
extern const asn1SccT_UInt32 numBase_samples_SonarScan_time_beams;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_names;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_elements;
extern const asn1SccT_UInt32 numBase_JointTransformVector_names;
extern const asn1SccT_UInt32 numBase_JointTransformVector_elements;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTransform_names;
extern const asn1SccT_UInt32 numBase_NamedVector_Base_JointTransform_elements;
extern const asn1SccT_UInt32 numBase_samples_frame_Frame_image;
extern const asn1SccT_UInt32 numBase_samples_frame_Frame_attributes;
extern const asn1SccT_UInt32 numWrappers_MatrixXd_data;
extern const asn1SccT_UInt32 numWrappers_VectorXd_data;
extern const asn1SccT_UInt32 numBase_JointTransformVector_m_names;
extern const asn1SccT_UInt32 numBase_NamedVector_base_JointTransform_m_names;
extern const asn1SccT_UInt32 numBase_NamedVector_base_Wrench_m_names;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_m_points;
extern const asn1SccT_UInt32 numBase_samples_Pointcloud_m_colors;
extern const asn1SccT_UInt32 numBase_samples_Wrenches_m_names;
extern const asn1SccT_UInt32 numWrappers_geometry_Spline_knots;
extern const asn1SccT_UInt32 numWrappers_geometry_Spline_vertices;
extern const asn1SccT_UInt32 numT_String; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
